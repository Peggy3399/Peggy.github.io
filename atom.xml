<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peegy&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://peggy3399.github.io/"/>
  <updated>2017-12-28T06:54:21.256Z</updated>
  <id>https://peggy3399.github.io/</id>
  
  <author>
    <name>Peggy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>心灵治愈系</title>
    <link href="https://peggy3399.github.io/2017/12/28/%E5%8F%AF%E6%83%9C%E4%B8%8D%E6%98%AF%E4%BD%A0/"/>
    <id>https://peggy3399.github.io/2017/12/28/可惜不是你/</id>
    <published>2017-12-28T03:27:59.000Z</published>
    <updated>2017-12-28T06:54:21.256Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/Peggy3399/Peggy3399.github.io/blob/master/images/avatar/timg.jpg?raw=true" alt=""></p><ul><li><p>我以为长大就能解决所有问题，但长大才是问题的开始…</p></li><li><p>人生最遗憾的,莫过于,轻易地放弃了不该放弃的,固执地坚持了不该坚持的…</p></li><li><p>有些时候，正是为了爱才悄悄躲开，躲开的是身影，躲不开的却是那份默默的情怀…</p></li></ul><a id="more"></a><ul><li><p>有些失去是注定的,有些缘分是永远不会有结果的，爱一个人不一定会拥有,拥有一个人就一定要好好去爱…</p></li><li><p>恋爱，在感情上，当你想征服对方的时候，实际上已经在一定程度上被对方征服了。首先是对方对你的吸引，然后才是你征服对方的欲望…</p></li><li><p>如果爱上，就不要轻易放过机会。莽撞，可能使你后悔一阵子；怯懦，却可能使你后悔一辈子…</p></li><li><p>爱情还没有来到，日子是无忧无虑的；最痛苦的，也不过是测验和考试。当时觉得很大压力，后来回望，不过是多么的微小…</p></li><li><p>曾经相遇，总胜过从未碰头…</p></li><li><p>爱，从来就是一件千回百转的事。不曾被离弃，不曾受伤害，怎懂得爱人？爱，原来是一种经历，但愿人长久…</p></li><li><p>人生的大部份时间里，承诺同义词是束缚，奈何我们向往束缚…</p></li><li><p>我们放下尊严, 放下个性，放下固执，都只是因为放不下一个人…</p></li><li><p>如果，不幸福，如果，不快乐，那就放手吧；如果，舍不得，如果，放不下，那就痛苦吧…</p></li><li><p>人的一生就像在拉屎，有时你已经很努力了，可出来的是一个屁…</p></li><li><p>“什么叫乐观派的人？”“这个……就像茶壶一样，屁股都烧的红红的，它还有心情吹口哨。”…</p></li><li><p>如果有一天，不再喜欢你了，我的生活会不会又像从前那样孤单、颓废……我不想再要那样的生活，所以，在我还没有放弃你之前，请你,至少要先喜欢上我…</p></li><li><p>“以后你的头归我管，你要是敢蹂躏它，我就跟你没完。” “那还有什么是我自己的吗？” “很抱歉，似乎除了我你一无所有。”…</p></li><li><p>承诺本来就是男人与女人的一场角力，有时皆大欢喜，大部份的情况却两败俱伤…</p></li><li><p>只想找一个在我失意时可以承受我的眼泪，在我快乐时，可以让我咬一口的肩膊…</p></li><li><p>好的爱情是你透过一个男人看到世界，坏的爱情是你为了一个人舍弃世界。总以为自己才是付出的那个，其实，他为我放弃的更多…</p></li><li><p>当深爱的人与最好的朋友都在你身边时，这大约就是人生最快乐的事了…</p></li><li><p>原来的我们，都敢理直气壮地说一辈子…</p></li><li><p>因为承诺，所以我们愿意等…</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/Peggy3399/Peggy3399.github.io/blob/master/images/avatar/timg.jpg?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我以为长大就能解决所有问题，但长大才是问题的开始…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;人生最遗憾的,莫过于,轻易地放弃了不该放弃的,固执地坚持了不该坚持的…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有些时候，正是为了爱才悄悄躲开，躲开的是身影，躲不开的却是那份默默的情怀…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="语录" scheme="https://peggy3399.github.io/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Angular2-basic</title>
    <link href="https://peggy3399.github.io/2017/11/14/angular2-basic/"/>
    <id>https://peggy3399.github.io/2017/11/14/angular2-basic/</id>
    <published>2017-11-14T03:47:32.000Z</published>
    <updated>2017-12-28T06:21:48.726Z</updated>
    
    <content type="html"><![CDATA[<h4 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h4><p>Angular2 指令是构成Angular2应用程序的重要组成部分，指令主要用来对模板的标签或者元素附加一些新的特性或者功能，改变一个 DOM 元素的外观或行为，主要存在两种类型的指令：</p><ul><li>结构型指令：会通过添加 / 删除 DOM 元素来更改 DOM 树布局</li><li>属性型指令：指令改变一个元素的外观或行为。</li></ul><a id="more"></a><h5 id="NgStyle"><a href="#NgStyle" class="headerlink" title="NgStyle"></a>NgStyle</h5><p>NgStyle 指令，可以通过angular表达式为DOM元素设置一个CSS属性。NgStyle真正厉害之处是可以使用动态值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;color&quot; #colorinput&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;fontSize&quot; #fontinput&gt;</span><br><span class="line">    &lt;button (click)=&quot;apply(colorinput.value, fontinput.value)&quot;&gt; apply &lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span [ngStyle]=&quot;&#123;color: colorinput.value, &apos;background-color&apos;: &apos;blue&apos;&#125;&quot; [style.font-size.px]=&quot;fontSize&quot;&gt;color :&#123;&#123; colorinput.value &#125;&#125; font: &#123;&#123;fontinput.value&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;p [ngStyle]=&quot;style()&quot;&gt;hello hello hello&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="NgIf"><a href="#NgIf" class="headerlink" title="NgIf"></a>NgIf</h5><p>ngIf指令是用于当你想要通过某个条件显示或者隐藏一个元素时，条件是由你传递给该指令的表达式结果来确定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngIf=&quot;false&quot;&gt;&lt;/div&gt; &lt;!-- never displayed --&gt;</span><br><span class="line">&lt;div *ngIf=&quot;a &gt; b&quot;&gt;&lt;/div&gt; &lt;!-- displayed if a is more than b --&gt;</span><br><span class="line">&lt;div *ngIf=&quot;str === &apos;yes&apos;&quot;&gt;&lt;/div&gt; &lt;!-- displayed if str holds the string &quot;yes&quot; --&gt;</span><br><span class="line">&lt;div *ngIf=&quot;myFunc()&quot;&gt;&lt;/div&gt; &lt;!-- displayed if myFunc returns a true value --&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Angular2 没有提供内置的ng-show，如果你的目标只是改变一个元素的css，你可以考虑使用ngStyle或class指令。只是用[hidden]属性，没有[show]属性。</p></blockquote><h5 id="NgClass"><a href="#NgClass" class="headerlink" title="NgClass"></a>NgClass</h5><p>NgClass指令，在你的HTML模板通过ngClass属性表示，允许您为一个给定的DOM元素动态地设置和改变CSS类。</p><ul><li>使用方式是通过对象字符串，对象用key作为类名称，value应该是一个true/false值，以指示该类是否应该应用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [ngClass]=&quot;&#123;bordered: false&#125;&quot;&gt;This is never bordered&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>在组件中声明一个数组变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.classList = [&apos;blue&apos;, &apos;round&apos;];</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;base&quot; [ngClass]=&quot;classList&quot;&gt;</span><br><span class="line">  This is &#123;&#123; classList.indexOf(&apos;blue&apos;) &gt; -1 ? &quot;&quot; : &quot;NOT&quot; &#125;&#125; blue and &#123;&#123; classList.indexOf(&apos;round&apos;) &gt; -1 ? &quot;&quot; : &quot;NOT&quot; &#125;&#125; round</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>通过对象数组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [ngClass]=&quot;&#123;true:&apos;change1&apos;,false:&apos;change2&apos;&#125;[className]&quot;&gt;This is Angular1&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div [class.change1]=&quot;className&quot;&gt;This is Angular2&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>通过key/value</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [ngClass]=&quot;&#123;&apos;change1&apos;:select1,&apos;change2&apos;:select2,&apos;change3&apos;:select3&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div [ngClass]=&quot;&#123;&apos;change1&apos;:(className == &apos;select1&apos;)&#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="ngSwitch"><a href="#ngSwitch" class="headerlink" title="ngSwitch"></a>ngSwitch</h5><p>NgSwitch指令可以应用在任何HTML元素上，它评估元素的ngSwitch属性值，并根据这个值 决定应用哪些template的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul [ngSwitch]=&quot;choice&quot;&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;1&quot;&gt;First choice&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;2&quot;&gt;Second choice&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;3&quot;&gt;Third choice&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;4&quot;&gt;Fourth choice&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;2&quot;&gt;Second choice, again&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchDefault&gt;Default choice&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可以同时显示多个分支例如,在上面的示例中choice是2时,第二和第五li将渲染</p></blockquote><h5 id="NgNonBindable"><a href="#NgNonBindable" class="headerlink" title="NgNonBindable"></a>NgNonBindable</h5><p>比方说，我们要渲染在我们模板中的纯字符串。通常，该文本将因为我们使用的模板语法绑定到content变量的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;bordered&quot;&gt;&#123;&#123; content &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;pre&quot; ngNonBindable&gt;</span><br><span class="line">    &amp;lt;-- This is what &#123;&#123; content &#125;&#125; rendered &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="NgTemplateOutlet"><a href="#NgTemplateOutlet" class="headerlink" title="NgTemplateOutlet"></a>NgTemplateOutlet</h5><p>我们可以建立一个模板,使用这个模板,通过在不同的上下文可重用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template  #foo let-name=&quot;name&quot; let-skills=&quot;skills&quot;&gt;</span><br><span class="line">    &lt;h4&gt;&#123;&#123;name&#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li *ngFor=&quot;let s of skills&quot;&gt;&#123;&#123;s&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;div [ngTemplateOutlet]=&quot;foo&quot; [ngOutletContext]=&quot;msg1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;h1 style=&quot;background: yellow;&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;div [ngTemplateOutlet]=&quot;foo&quot; [ngOutletContext]=&quot;msg2&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><h5 id="属性型指令"><a href="#属性型指令" class="headerlink" title="属性型指令"></a>属性型指令</h5><ul><li><a href="http://blog.csdn.net/shenlei19911210/article/details/53218074" target="_blank" rel="external">Directive</a> 提供@Directive装饰器功能。</li><li>ElementRef：是一个服务，注入到指令构造函数中，这样代码可以访问 DOM 元素。</li><li>Input：将数据从绑定表达式传达到指令中。</li><li>Renderer：写在构造函数中，让代码可以改变 DOM 元素的属性等（setElementAttribute，setElementStyle，setElementClass等）。</li><li>host：添加监听事件。</li></ul><p>@Directive装饰器需要一个 CSS 选择器(属性名称加方括号-[attr])，以便从模板中识别出关联到这个指令的 HTML。<br>指令的选择器是[myHighlight]，Angular将会在模板中找到所有带myHighlight属性的元素。</p><blockquote><p>一定要记住在 @NgModule 的 declarations 数组中显示的声明我们定义的指令。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Directive, ElementRef, Renderer, HostListener, Input &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">    selector: &apos;[prefixHightlight]&apos;,</span><br><span class="line">    host: &#123;</span><br><span class="line">        &apos;(click)&apos;: &apos;onclick()&apos;,</span><br><span class="line">        &apos;(mouseleave)&apos;: &apos;onMouseLeave()&apos;,</span><br><span class="line">        &apos;(mouseenter)&apos;: &apos;onMouseEnter()&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用数据绑定向指令传递值,在定义这个属性的时候，我们调用了@Input()装饰器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Input(&apos;prefixHightlight&apos;) highlightColor: string;</span><br></pre></td></tr></table></figure><p>添加监听事件另一种就是通过 @HostListener，直接操纵 DOM 元素的方式给宿主 DOM 元素附加一个事件监听器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@HostListener(&apos;mouseenter&apos;)</span><br><span class="line">onMouseEnter() &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="结构型指令"><a href="#结构型指令" class="headerlink" title="结构型指令"></a>结构型指令</h5><p><a href="http://blog.csdn.net/u010130282/article/details/53613297" target="_blank" rel="external">结构型指令</a>需要在构造方法注入TemplateRef和ViewContainerRef这两个服务，TemplateRef用于访问组件模板，ViewContainerRef是渲染器，用于往DOM插入或移除模板等。</p><blockquote><p>注意属性型和结构型子在dom元素中的写法</p></blockquote><h4 id="NgZone"><a href="#NgZone" class="headerlink" title="NgZone"></a>NgZone</h4><p>Angular应用程序通过组件实例和模板之间进行数据交互，也就是将组件的数据和页面DOM元素关连起来，当数据有变化后，NG2能够监测到这些变化并更新视图，反之亦然，它的数据流向是单项的，通过属性绑定和事件绑定来实现数据的流入和流出，数据从属性绑定流入组件，从事件流出组件，数据的双向绑定就是通过这样来实现的。</p><h5 id="进行变化监测的情形"><a href="#进行变化监测的情形" class="headerlink" title="进行变化监测的情形"></a>进行变化监测的情形</h5><p>angular需要去更新视图的情形： </p><ul><li>event：在view中绑定事件来监听用户的操作，如果数据有变更则更新视图；</li><li>xmlHTTPRequest/webSocket：例如从远端服务拉取对应的数据，这是一个异步的过程；</li><li>timeout：例如：setTimeout, setInterval, requestAnimationFrame都是在某个延时后触发。</li></ul><p>(requestAnimationFrame)[<a href="http://www.zhangxinxu.com/wordpress/tag/requestanimationframe/" target="_blank" rel="external">http://www.zhangxinxu.com/wordpress/tag/requestanimationframe/</a>]</p><p>这些都是异步的处理，即需要使用异步回调函数，结论就是，不管任何时候的一个异步操作，我们应用程序状态可能已经被改变，这就需要告诉Angular去更新视图。</p><p><a href="http://www.cnblogs.com/czaiz/p/6530820.html" target="_blank" rel="external">关于zone</a>：简单的可以概述成zone是一个异步事件拦截器，也就是说zone能够hook到异步任务的执行上下文，以此来处理一些操作，比如说，在我们每次启动或者完成一个异步的操作、进行堆栈的跟踪处理、某段功能代码进入或者离开zone，我们可以在这些关键的节点重写我们所需处理的方法。</p><p>实际上，ngZone是基于<a href="http://www.cnblogs.com/whitewolf/p/zone-js.html" target="_blank" rel="external">zone.js</a>来实现的，Angular2 fork了zone.js，它是zone派生出来的一个子zone，在Angular环境内注册的异步事件都运行在这个子zone上(因为ngZone拥有整个Angular运行环境的执行上下文)。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;内置指令&quot;&gt;&lt;a href=&quot;#内置指令&quot; class=&quot;headerlink&quot; title=&quot;内置指令&quot;&gt;&lt;/a&gt;内置指令&lt;/h4&gt;&lt;p&gt;Angular2 指令是构成Angular2应用程序的重要组成部分，指令主要用来对模板的标签或者元素附加一些新的特性或者功能，改变一个 DOM 元素的外观或行为，主要存在两种类型的指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构型指令：会通过添加 / 删除 DOM 元素来更改 DOM 树布局&lt;/li&gt;
&lt;li&gt;属性型指令：指令改变一个元素的外观或行为。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="angular" scheme="https://peggy3399.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular2路由</title>
    <link href="https://peggy3399.github.io/2017/11/14/angular2-routes/"/>
    <id>https://peggy3399.github.io/2017/11/14/angular2-routes/</id>
    <published>2017-11-14T03:45:21.000Z</published>
    <updated>2017-12-28T06:21:27.655Z</updated>
    
    <content type="html"><![CDATA[<h4 id="路由概述"><a href="#路由概述" class="headerlink" title="路由概述"></a>路由概述</h4><p>  大多数带路由的应用都要在 index.html 的 <head> 标签下先添加一个 <base> 元素，来告诉路由器该如何合成导航用的 URL 。</head></p><p>  Angular2包含了一个路由框架，我们只需要定义一个个的路径、和它对应的组件，然后在页面跳转时也使用Angular2的方式，我们就能够很方便的实现路由控制。</p><a id="more"></a><p>  Angular2的路由主要包括下面4个部分：</p><ul><li>路由定义：通俗来说定义的就是一个URL路径，打开的是哪个页面，由哪个控制器来控制数据交互和用户交互。在Angular2中，这个控制器就是组件(Component)，页面就是在组件定义中定义的这个组件对应的模板页面。</li><li>路由器：也就是分发器。它是由Angular2的框架实现。当我们点击一个链接时，就是由它来确定要打开哪一个组件，怎么封装和传递参数等。</li><li>导航：也就是从一个页面打开另一个页面。一般有两种方式，一种是通过页面上的一个链接link，另一种是在js里面使用代码导航。 </li><li>参数：当我们在页面之间跳转时，通常都需要传递参数。除了常用的通过url参数来传递以外，在REST风格的路径设计中，我们经常需要使用某一个id来作为url的一部分，也就是说把参数放在url里面</li></ul><h4 id="路由定义"><a href="#路由定义" class="headerlink" title="路由定义"></a>路由定义</h4><p>  我们需要定义我们的路由，也就是路径-组件的对应关系。通常我们会创建一个单独的文件 app.routes.ts，基本的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import&#123; Routes &#125;from&apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">export const routes: Routes = [ </span><br><span class="line">  &#123; path: &apos;&apos;, redirectTo: &apos;/todost&apos;, pathMatch: &apos;full&apos; &#125;, </span><br><span class="line">  &#123; path: &apos;todost&apos;, component: TodoListComponent &#125;, </span><br><span class="line">  &#123; path: &apos;todo/detail/:id&apos;, component: TodoDetailComponent &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>  需要在app.module.ts中引入路由模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; RouterModule &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">imports: [</span><br><span class="line">  RouterModule.forRoot(routes)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>如果我们要定义子模块和子模块路由，就需要使用 AppRoutingModule的方式。在你的开发中，也建议使用路由模块的定义方式。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; RouterModule, Routes &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">const routes: Routes = [&#123;</span><br><span class="line">    path: &apos;&apos;,</span><br><span class="line">    redirectTo: &apos;/todo/list&apos;,</span><br><span class="line">    pathMatch: &apos;full&apos;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;todo/list&apos;,</span><br><span class="line">    component: TodoListComponent</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;todo/detail/:id&apos;,</span><br><span class="line">    component: TodoDetailComponent</span><br><span class="line">&#125;];</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [RouterModule.forRoot(routes)],</span><br><span class="line">    exports: [RouterModule]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   Routes其实就是一个路由列表类型 Route[],而 Route是Angular路由框架定义的一个接口。最基本的路由包括2个属性: path和 component,分别是这个路由对应的URL路径，和这个路径对应的组件。</p><p>   上面使用 redirectTo: ‘/todo/list’，重定向到任务列表。当我们使用 redirectTo重定向时，需要 pathMatch来指定匹配方式，也就是如何匹配上面的 ‘’。我们可以完全匹配 full,也可以匹配前缀 prefix。</p><h4 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h4><h5 id="设置载入点"><a href="#设置载入点" class="headerlink" title="设置载入点"></a>设置载入点</h5><p>  载入点，就是来告诉Angular我们的这个路由对应组件的页面，要载入到页面上哪一个地方，这个就是 RouterOutlet。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-outlet&gt;&lt;/router-outlet&gt;</span><br></pre></td></tr></table></figure><h5 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h5><h5 id="使用链接导航"><a href="#使用链接导航" class="headerlink" title="使用链接导航"></a>使用链接导航</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a routerLink=&quot;/todo/list&quot; routerLinkActive=&quot;active&quot;&gt;这是一个链接&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>  outerLink=”/todo/list” 就是链接的定义方式，后面的 routerLinkActive=”active” 表示如果当前的路由处于被激活的状态时，在这个链接的a元素上，就添加一个 active的css类。</p><h5 id="代码中导航"><a href="#代码中导航" class="headerlink" title="代码中导航"></a>代码中导航</h5><p>  有时候，我们需要在代码中根据具体情况跳转到不同的页面，我们可以通过Angular2提供的路由器 Router来实现。</p><p>  如果我们要在某一个组件中实现跳转，我们需要在这个组件的构造方法中注入 Router，然后在需要的时候调用它的 <a href="http://blog.csdn.net/erciyuan_nuonuo/article/details/54604311" target="_blank" rel="external">navigate</a>(newUrl)方法。todoitem.component.ts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Router &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">export class TodoItemComponent &#123;</span><br><span class="line">    constructor(private router: Router) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    gotoDetail(todo: any) &#123;</span><br><span class="line">        this.router.navigate([&apos;/todo/detail&apos;, todo.id]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h5><p>  如果只是在使用路由的时候传递参数的话，有2种方式：</p><ul><li>路径方式：参数作为路径的一部分，例如 /todo/detail/12，其中的’12’就是参数，代表任务Id。 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/todo/detail&apos;, 12]&quot; routerLinkActive=&quot;active&quot;&gt;</span><br></pre></td></tr></table></figure><p>  在这里，我们使用 [routerLink]的方式进行数据的绑定，绑定的值，就是 [‘/todo/detail’, item.id]，他是一个表达式，Angular会把这个列表中的2个数据解析后拼接在一起，生成’/todo/detail/12’的链接。如果我们的连接格式是’/todo/12/detail’，那就是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/todo&apos;, item.id, &apos;detail&apos;]&quot; routerLinkActive=&quot;active&quot;&gt;</span><br></pre></td></tr></table></figure><p>  代码中参数导航：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onSelect(item: Item) &#123;</span><br><span class="line">  this.router.navigate( [&apos;/todo/detail&apos;, item.id] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>参数方式：这种方式是把参数放在URL的参数里，例如 /todo/detail/12?id=12&amp;type=important。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/todo/detail&apos;]&quot; [queryParams]=&quot;&#123;id: item.id, type: &apos;important&apos;&#125;&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>  代码中参数导航：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onSelect(item: Item) &#123;</span><br><span class="line">  this.router.navigate( [&apos;/todo/detail&apos;, this.selectedTodo.id], &#123; queryParams: &#123; id: this.selectedTodo.id, type:&apos;important&apos;&#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h4><p>  在需要加载的组件下写children，写法与路由的写法一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; RouterModule, Routes &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">const appChildRoutes: Routes = [</span><br><span class="line">    &#123;path: &apos;&apos;, redirectTo: &quot;one&quot; &#125;,</span><br><span class="line">    &#123;path: &quot;one&quot;, component: TodoListComponent&#125;,</span><br><span class="line">    &#123;path: &quot;two&quot;, component: TodoList2Component&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const routes: Routes = [&#123;</span><br><span class="line">    path: &apos;&apos;,</span><br><span class="line">    redirectTo: &apos;/todo/list&apos;,</span><br><span class="line">    pathMatch: &apos;full&apos;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;todo/list&apos;,</span><br><span class="line">    component: TodoListComponent</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;todo/detail/:id&apos;,</span><br><span class="line">    component: TodoDetailComponent,</span><br><span class="line">    children: appChildRoutes</span><br><span class="line">&#125;];</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [RouterModule.forRoot(routes)],</span><br><span class="line">    exports: [RouterModule]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;路由概述&quot;&gt;&lt;a href=&quot;#路由概述&quot; class=&quot;headerlink&quot; title=&quot;路由概述&quot;&gt;&lt;/a&gt;路由概述&lt;/h4&gt;&lt;p&gt;  大多数带路由的应用都要在 index.html 的 &lt;head&gt; 标签下先添加一个 &lt;base&gt; 元素，来告诉路由器该如何合成导航用的 URL 。&lt;/head&gt;&lt;/p&gt;
&lt;p&gt;  Angular2包含了一个路由框架，我们只需要定义一个个的路径、和它对应的组件，然后在页面跳转时也使用Angular2的方式，我们就能够很方便的实现路由控制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="angular" scheme="https://peggy3399.github.io/tags/angular/"/>
    
      <category term="路由" scheme="https://peggy3399.github.io/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>sass语法</title>
    <link href="https://peggy3399.github.io/2017/11/13/sass%E8%AF%AD%E6%B3%95/"/>
    <id>https://peggy3399.github.io/2017/11/13/sass语法/</id>
    <published>2017-11-13T08:27:56.000Z</published>
    <updated>2017-11-13T09:55:14.926Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h4><p> <a href="http://www.w3cplus.com/sassguide/syntax.html" target="_blank" rel="external">sass</a>的导入(@import)规则和CSS的有所不同，编译时会将@import的scss文件合并进来只生成一个CSS文件。但是如果你在sass文件中导入css文件如@import ‘reset.css’，那效果跟普通CSS导入样式文件一样， 文件中，而是以@import方式存在。<br> 所有的sass导入文件都可以忽略后缀名.scss。一般来说基础的文件命名方法以_开头，如_mixin.scss。这种文件在导入的时候可以不写下划线，可写成@import “mixin”。</p><a id="more"></a><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul><li>// ….. 单行注释不会输入到CSS中</li><li>/<em> ….. </em>/ 标准注释会编译到css中</li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>sass的变量必须是$开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(:)分隔开（就像CSS属性设置一样），如果值后面加上!default则表示默认值。</p><ol><li>普通变量： 声明后全局范围内可以使用</li><li>默认变量： 默认变量之后加上!default<blockquote><p>默认变量需要被背覆盖时只需要在默认变量之前重新声明变量。例如：</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$baseLineHeight:        2;</span><br><span class="line">$baseLineHeight:        1.5 !default;</span><br><span class="line">body&#123;</span><br><span class="line">    line-height: $baseLineHeight; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">body&#123;</span><br><span class="line">    line-height:2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>特殊变量： 当变量作为属性或者在某些特殊的情况下必须要以#{$variables}形式使用。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$borderDirection:       top !default; </span><br><span class="line">$baseFontSize:          12px !default;</span><br><span class="line">$baseLineHeight:        1.5 !default;</span><br><span class="line"></span><br><span class="line">//应用于class和属性</span><br><span class="line">.border-#&#123;$borderDirection&#125;&#123;</span><br><span class="line">  border-#&#123;$borderDirection&#125;:1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">//应用于复杂的属性值</span><br><span class="line">body&#123;</span><br><span class="line">    font:#&#123;$baseFontSize&#125;/#&#123;$baseLineHeight&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">.border-top&#123;</span><br><span class="line">  border-top:1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">  font: 12px/1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多值变量： 多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象</p></li></ol><ul><li>list： list数据可通过空格，逗号或小括号分隔多个值，可用nth($var,$index)取值。关于list数据操作还有很多其他函数如length($list)，join($list1,$list2,[$separator])，append($list,$value,[$separator])等。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//定义</span><br><span class="line">//一维数据</span><br><span class="line">$px: 5px 10px 20px 30px;</span><br><span class="line"></span><br><span class="line">//二维数据，相当于js中的二维数组</span><br><span class="line">$px: 5px 10px, 20px 30px;</span><br><span class="line">$px: (5px 10px) (20px 30px);</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$linkColor:         #08c #333 !default;//第一个值为默认值，第二个鼠标滑过值</span><br><span class="line">a&#123;</span><br><span class="line">  color:nth($linkColor,1);</span><br><span class="line"></span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">    color:nth($linkColor,2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">a&#123;</span><br><span class="line">  color:#08c;</span><br><span class="line">&#125;</span><br><span class="line">a:hover&#123;</span><br><span class="line">  color:#333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>map： map数据以key和value成对出现，其中value又可以是list。格式为：$map: (key1: value1, key2: value2, key3: value3);。可通过map-get($map,$key)取值。关于map数据还有很多其他函数如map-merge($map1,$map2)，map-keys($map)，map-values($map)等。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//定义</span><br><span class="line">$heading: (h1: 2em, h2: 1.5em, h3: 1.2em);</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);</span><br><span class="line">@each $header, $size in $headings &#123;</span><br><span class="line">  #&#123;$header&#125; &#123;</span><br><span class="line">    font-size: $size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">h1 &#123;</span><br><span class="line">  font-size: 2em; </span><br><span class="line">&#125;</span><br><span class="line">h2 &#123;</span><br><span class="line">  font-size: 1.5em; </span><br><span class="line">&#125;</span><br><span class="line">h3 &#123;</span><br><span class="line">  font-size: 1.2em; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>全局变量： 在变量值后面加上!global即为全局变量。这个目前还用不上，不过将会在sass 3.4后的版本中正式应用。目前的sass变量范围饱受诟病，所以才有了这个全局变量。</li></ol><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><ul><li>选择器嵌套（居多）： 指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性。<br>在选择器嵌套中，可以使用&amp;表示父元素选择器</li><li>属性嵌套：指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">.fakeshadow &#123;</span><br><span class="line">  border: &#123;</span><br><span class="line">    style: solid;</span><br><span class="line">    left: &#123;</span><br><span class="line">      width: 4px;</span><br><span class="line">      color: #888;</span><br><span class="line">    &#125;</span><br><span class="line">    right: &#123;</span><br><span class="line">      width: 2px;</span><br><span class="line">      color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">.fakeshadow &#123;</span><br><span class="line">  border-style: solid;</span><br><span class="line">  border-left-width: 4px;</span><br><span class="line">  border-left-color: #888;</span><br><span class="line">  border-right-width: 2px;</span><br><span class="line">  border-right-color: #ccc; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@at-root：用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//单个选择器跳出</span><br><span class="line">.parent-2 &#123;</span><br><span class="line">  color:#f00;</span><br><span class="line">  @at-root .child &#123;</span><br><span class="line">    width:200px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//多个选择器跳出</span><br><span class="line">.parent-3 &#123;</span><br><span class="line">  background:#f00;</span><br><span class="line">  @at-root &#123;</span><br><span class="line">    .child1 &#123;</span><br><span class="line">      width:300px;</span><br><span class="line">    &#125;</span><br><span class="line">    .child2 &#123;</span><br><span class="line">      width:400px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@at-root与&amp;配合使用</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导入文件&quot;&gt;&lt;a href=&quot;#导入文件&quot; class=&quot;headerlink&quot; title=&quot;导入文件&quot;&gt;&lt;/a&gt;导入文件&lt;/h4&gt;&lt;p&gt; &lt;a href=&quot;http://www.w3cplus.com/sassguide/syntax.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sass&lt;/a&gt;的导入(@import)规则和CSS的有所不同，编译时会将@import的scss文件合并进来只生成一个CSS文件。但是如果你在sass文件中导入css文件如@import ‘reset.css’，那效果跟普通CSS导入样式文件一样， 文件中，而是以@import方式存在。&lt;br&gt; 所有的sass导入文件都可以忽略后缀名.scss。一般来说基础的文件命名方法以_开头，如_mixin.scss。这种文件在导入的时候可以不写下划线，可写成@import “mixin”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="sass" scheme="https://peggy3399.github.io/tags/sass/"/>
    
      <category term="css" scheme="https://peggy3399.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>关闭占用端口</title>
    <link href="https://peggy3399.github.io/2017/11/13/%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3/"/>
    <id>https://peggy3399.github.io/2017/11/13/关闭占用端口/</id>
    <published>2017-11-13T08:27:07.000Z</published>
    <updated>2017-11-13T09:55:20.581Z</updated>
    
    <content type="html"><![CDATA[<p>命令：netstat -ano—–列出所有端口的情况<br>命令：netstat -aon|findstr “49157”——-查看被占用端口对应的PID<br>命令：tasklist|findstr “2720”——查看是哪个进程或者程序占用了2720<br>命令：taskkill /f /t /im Tencentdl.exe——结束该进程<br>      taskkill/pid PID号 /F</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;命令：netstat -ano—–列出所有端口的情况&lt;br&gt;命令：netstat -aon|findstr “49157”——-查看被占用端口对应的PID&lt;br&gt;命令：tasklist|findstr “2720”——查看是哪个进程或者程序占用了2720&lt;br&gt;命令：tas
      
    
    </summary>
    
    
      <category term="命令行" scheme="https://peggy3399.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>git操作</title>
    <link href="https://peggy3399.github.io/2017/11/13/git%E6%93%8D%E4%BD%9C/"/>
    <id>https://peggy3399.github.io/2017/11/13/git操作/</id>
    <published>2017-11-13T07:03:14.000Z</published>
    <updated>2017-11-13T09:54:29.217Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一次提交本地代码到远程分支"><a href="#第一次提交本地代码到远程分支" class="headerlink" title="第一次提交本地代码到远程分支"></a>第一次提交本地代码到远程分支</h4><ul><li>git init</li><li>git remote add origin https://… .git</li><li>git pull origin master –allow-unrelated-histories</li><li>git add .</li><li>git commit -m ‘解释说明文字’</li><li>git push oriign master</li></ul><a id="more"></a><blockquote><p>出现的问题fatal: refusing to merge unrelated histories<br>解决问题：git pull origin master –allow-unrelated-histories</p></blockquote><h4 id="创建本地分支提交到远程"><a href="#创建本地分支提交到远程" class="headerlink" title="创建本地分支提交到远程"></a>创建本地分支提交到远程</h4><ul><li>git branch dev</li><li>git checkout dev</li><li>git add .</li><li>git commit -m ‘解释说明文字’</li><li>git push oriign dev</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一次提交本地代码到远程分支&quot;&gt;&lt;a href=&quot;#第一次提交本地代码到远程分支&quot; class=&quot;headerlink&quot; title=&quot;第一次提交本地代码到远程分支&quot;&gt;&lt;/a&gt;第一次提交本地代码到远程分支&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;git init&lt;/li&gt;
&lt;li&gt;git remote add origin https://… .git&lt;/li&gt;
&lt;li&gt;git pull origin master –allow-unrelated-histories&lt;/li&gt;
&lt;li&gt;git add .&lt;/li&gt;
&lt;li&gt;git commit -m ‘解释说明文字’&lt;/li&gt;
&lt;li&gt;git push oriign master&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://peggy3399.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello Everybody</title>
    <link href="https://peggy3399.github.io/2017/11/13/hello-world/"/>
    <id>https://peggy3399.github.io/2017/11/13/hello-world/</id>
    <published>2017-11-13T06:52:33.315Z</published>
    <updated>2017-11-13T10:29:53.758Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我创建了自己的微博，很开心跟大家分享！</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我创建了自己的微博，很开心跟大家分享！&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hello" scheme="https://peggy3399.github.io/tags/hello/"/>
    
  </entry>
  
</feed>
