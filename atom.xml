<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peegy&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://peggy3399.github.io/"/>
  <updated>2018-06-11T10:33:27.594Z</updated>
  <id>https://peggy3399.github.io/</id>
  
  <author>
    <name>Peggy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue2.0探索之vuex</title>
    <link href="https://peggy3399.github.io/2018/06/11/vue2-0%E6%8E%A2%E7%B4%A2%E4%B9%8Bvuex/"/>
    <id>https://peggy3399.github.io/2018/06/11/vue2-0探索之vuex/</id>
    <published>2018-06-11T10:25:52.000Z</published>
    <updated>2018-06-11T10:33:27.594Z</updated>
    
    <content type="html"><![CDATA[<p>事出必有因，第一次自己这么认真的去构思去写博客，随着项目的需求，组件之间的数据交互变得越来越频繁且关系密切，如果这个时候还局限于props和$emit，觉得自己太low了，于是乎，就想要好好的学习一下vuex，之后发现自己用错了它的功能，接下来好好说道说道。<br><a id="more"></a></p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。（我自己感觉其实就是个管家…）</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><h5 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h5><p>npm install vuex –save</p><h5 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h5><p>yarn add vuex</p><p>在vue项目中引用一些公用的库等都写在main.js，但此次不直接写在其中，通过引入写在store.js文件中，main.js中引入store.js（以下代码均为store.js中内容）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// main.js</span><br><span class="line">import store from &apos;./vuex/store&apos;</span><br><span class="line">Vue.use(store)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  store,</span><br><span class="line">  render: h =&gt; h(App)</span><br><span class="line">&#125;).$mount(&apos;#app-box&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// store.js</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Vuex from &apos;vuex&apos;</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">// ..</span><br><span class="line"></span><br><span class="line">export default new Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="成员介绍"><a href="#成员介绍" class="headerlink" title="成员介绍"></a>成员介绍</h4><h5 id="State"><a href="#State" class="headerlink" title="State"></a>State</h5><p>状态库： Vuex使用的是单一状态树，也就是一个应用仅一个store实例。这个状态库中的数据，在项目任何组件中都可以使用，是全局的状态。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const state = &#123;</span><br><span class="line">    numList: [0, 1, 2, 3, 4, 5]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h5><p>获取状态数据：类似于computed计算属性，这个部分通常写一些处理状态数据的代码，比如过滤state中的某个状态数据。<br>第一个参数是state，因为getter会暴露在store中，所以第二个参数getters是可以接受其他模块中的getter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const getters = &#123;</span><br><span class="line">    filterEvenNum (state) &#123;</span><br><span class="line">        state.numList = state.numList.filter(s =&gt; s % 2 === 0)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h5><p>变化：类似于组件中methods，在vuex中改变store中state的值，只能通过mutation，注意mutation只进行同步操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const mutations = &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">        state.numList.forEach(num =&gt; num++)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mutation还可以接受传值，这样代码可以改写为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const mutations = &#123;</span><br><span class="line">    increment (state, value = 1) &#123;</span><br><span class="line">        state.numList.forEach(num =&gt; &#123; num += value &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>触发mutation比较特殊，是通过commit：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.commit(&apos;increment&apos;, 2)</span><br><span class="line"></span><br><span class="line">//vue页面触发</span><br><span class="line">this.$store.commit(&apos;increment&apos;, 2)</span><br></pre></td></tr></table></figure><p>使用mutation改变状态有需要遵守的规则这里提一个，剩下可以查看<a href="https://vuex.vuejs.org/zh/guide/mutations.html" target="_blank" rel="external">官方文档说明</a>。</p><p>mutation接受的参数过多时，通常使用对象来作为参数接受，平常封装函数我们也经常这么干，所以so easy，mutation改变状态时最好是用新对象来代替旧对象（ES6写法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.obj = &#123; ...state.obj, newProp: 123 &#125;</span><br></pre></td></tr></table></figure><h5 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h5><p>Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。</li></ul><p>Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，所以可以使用context.commit, context.rootState, context.getters。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const actions = &#123;</span><br><span class="line">    increment (&#123; commit &#125;, value) &#123;</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">          commit(&apos;increment&apos;, value)</span><br><span class="line">        &#125;, 2000)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>action可以结合ES2015中promise使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const actions = &#123;</span><br><span class="line">    increment (&#123; commit &#125;, value) &#123;</span><br><span class="line">        return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">            setTimeout(function () &#123;</span><br><span class="line">              commit(&apos;increment&apos;, value)</span><br><span class="line">              resolve()</span><br><span class="line">            &#125;, 2000)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>触发action是通过dispatch：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(&apos;increment&apos;)</span><br><span class="line"></span><br><span class="line">//vue页面触发</span><br><span class="line">this.$store.dispatch(&apos;increment&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>mutation和action都可以通过对象风格的方式提交和分发：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">commit(&#123;</span><br><span class="line">    type：&apos;increment&apos;,</span><br><span class="line">    value： 2</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h5><p>module主要针对于比较大型的项目，数据比较繁琐都写在一起会不容易维护，可以根据功能等将store模块化，每个模块拥有自己的 state、mutation、action、getter。我们上面的代码就可以将名称store.js换位num.js仅仅作为操作数据的模块。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a // -&gt; moduleA 的状态</span><br><span class="line">store.state.b // -&gt; moduleB 的状态</span><br></pre></td></tr></table></figure><h4 id="vue文件中使用方法"><a href="#vue文件中使用方法" class="headerlink" title="vue文件中使用方法"></a>vue文件中使用方法</h4><p>state，getter，mutation，action在vue文件中使用方式均有两种，这里拿state作为例子，其他类似，聪明的你肯定会举一反三：</p><ul><li>通过mapState</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapState &#125; from &apos;vuex&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">    // ...</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...maptate(&#123;</span><br><span class="line">            numList: state =&gt; state.numList,</span><br><span class="line">            // numArr在此页面中的新名字，&apos;numList&apos;等同于state =&gt; state.numList</span><br><span class="line">            numArr: &apos;numList&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果名字一致，也可以写在数组当中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mapState([</span><br><span class="line">    &apos;numList&apos;</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><p>此文件中后续使用this.numList或者this.numArr</p><ul><li>通过$store<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$store.state.numList</span><br></pre></td></tr></table></figure></li></ul><p>如果是模块化的store，请看<a href="https://vuex.vuejs.org/zh/guide/modules.html" target="_blank" rel="external">官方说明</a></p><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── api</span><br><span class="line">│   └── ... # 抽取出API请求</span><br><span class="line">├── components</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   └── ...</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          # 我们组装模块并导出 store 的地方</span><br><span class="line">    ├── actions.js        # 根级别的 action</span><br><span class="line">    ├── mutations.js      # 根级别的 mutation</span><br><span class="line">    └── modules</span><br><span class="line">        ├── cart.js       # 购物车模块</span><br><span class="line">        └── products.js   # 产品模块</span><br></pre></td></tr></table></figure><p>参考文档：<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="external">https://vuex.vuejs.org/zh/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事出必有因，第一次自己这么认真的去构思去写博客，随着项目的需求，组件之间的数据交互变得越来越频繁且关系密切，如果这个时候还局限于props和$emit，觉得自己太low了，于是乎，就想要好好的学习一下vuex，之后发现自己用错了它的功能，接下来好好说道说道。&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://peggy3399.github.io/tags/vue/"/>
    
      <category term="vuex" scheme="https://peggy3399.github.io/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>JS大全</title>
    <link href="https://peggy3399.github.io/2018/01/12/JS%E5%A4%A7%E5%85%A8/"/>
    <id>https://peggy3399.github.io/2018/01/12/JS大全/</id>
    <published>2018-01-12T03:13:43.000Z</published>
    <updated>2018-01-15T02:36:47.376Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 上有一个 Awesome – XXX 系列的资源整理。awesome-javascript 是 sorrycc 发起维护的 JS 资源列表，内容包括：包管理器、加载器、测试框架、运行器、QA、MVC框架和库、模板引擎、数据可视化、时间轴、编辑器等等。</p><a id="more"></a><h5 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h5><p>管理着 javascript 库，并提供读取和打包它们的工具。</p><ul><li>npm – npm 是 javascript 的包管理器。</li><li>Bower – 一个 web 应用的包管理器。</li><li>component – 能构建更好 web 应用的客户端包管理器。</li><li>spm – 全新的静态包管理器。</li><li>jam – 一个专注于浏览器端和兼容 RequireJS 的包管理器。</li><li>jspm – 流畅的浏览器包管理器。</li><li>Ender – 没有库文件的程序库。</li><li>volo – 以项目模板、添加依赖项与自动化生成的方式创建前端项目。</li><li>Duo – 一个整合 Component、Browserify 和 Go 的最佳思想，使开发者能快速方便地组织和编写前端代码的下一代包管理器。加载器JavaScript 的模块或加载系统。</li><li>RequireJS – JavaScript 文件和模块的加载器。</li><li>browserify – 在浏览器端以 node.js 的方式 require()。</li><li>SeaJS – 用于 Web 的模块加载器。</li><li>HeadJS – HEAD 的唯一脚本。</li><li>curl – 小巧、快速且易扩展的模块加载器，它能处理 AMD、CommonJS Modules/1.1、CSS、HTML/text 和历史脚本。</li><li>lazyload – 小巧且无依赖的异步 JavaScript 和 CSS 加载器。</li><li>script.js – 异步 JavaScript 加载器和依赖管理器。</li><li>systemjs – AMD、CJS（commonJS） 和符合 ES6 规范的模块加载器。</li><li>LodJS – 基于 AMD 的模块加载器。</li><li>ESL – 浏览器端的模块加载器，支持延迟定义和 AMD。</li><li>modulejs – 轻量的 JavaScript 模块系统。</li></ul><h5 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h5><ul><li>browserify – Browserify 让你能在浏览器端使用 require(‘modules’) ，打包所有依赖。</li><li>webpack – 为浏览器打包 CommonJs/AMD 模块。</li></ul><h5 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h5><ul><li>mocha – 适用于 node.js 和浏览器、简易、灵活、有趣的 JavaScript 测试框架。</li><li>jasmine – 简单无 DOM 的 JavaScript 测试框架。</li><li>qunit – 一个易于使用的 JavaScript 单元测试框架。</li><li>jest – 简单的 JavaScript 单元测试框架。</li><li>prova – 基于 Tape 和 Browserify 的测试运行器，它适用于 Node &amp; 浏览器。</li><li>DalekJS – 自动化且跨浏览器的 JavaScript 功能测试框架。断言</li><li>chai – 适用于 node.js 和浏览器的 BDD / TDD 断言框架，并能搭配其它测试框架使用。</li><li>Sinon.JS – 对 JavaScript 进行 spies、stubs 和 mock 测试。</li><li>expect.js – 简约的、适用于 Node.js 和浏览器端的 BDD 式断言工具。覆盖率</li><li>istanbul – 另一个 JS 代码覆盖率检测工具。</li><li>blanket – 一个简单的代码覆盖率检测库。它的设计理念是易于安装和使用，且可用于浏览器端和 node.js。</li><li>JSCover – JSCover 是一个检测 JavaScript 程序代码覆盖率的工具。运行器</li><li>phantomjs – 脚本化的 Headless WebKit。</li><li>slimerjs – 一个内核为 Gecko 的类似 PhantomJS 工具。</li><li>casperjs – 基于 PhantomJS 和 Slimer JS 的导航脚本和测试工具。</li><li>zombie – 基于 node.js 、快速、全栈且无图形界面的浏览器的测试工具。</li><li>totoro – 一个简单可靠且能跨浏览器运行的测试工具。</li><li>karma – 一个优秀的的 JavaScript 测试运行器。</li><li>nightwatch – 基于 node.js 和 selenium webdriver 的图形界面自动化测试框架。</li><li>intern – 下一代 JavaScript 代码测试栈。</li><li>yolpo – 在浏览器逐句执行的 JavaScript 解释器。</li></ul><h5 id="QA-工具"><a href="#QA-工具" class="headerlink" title="QA 工具"></a>QA 工具</h5><ul><li>JSHint – JSHint 是一个有助于发现 JavaScript 代码错误和潜在问题的工具。</li><li>jscs – JavaScript 代码风格检测工具。</li><li>jsfmt – 格式化、搜索和改写 JavaScript。</li><li>jsinspect – 检测复制粘贴和结构类似的代码。</li><li>buddy.js – 发现 JavaScript 代码里的 魔术数字。</li><li>ESLint – 完全插件化的工具，能在 JavaScript 中识别和记录模式。</li><li>JSLint – 高标准、严格和固执的代码质量工具，旨在只保持语言的优良部分。</li></ul><h5 id="MVC-框架和库"><a href="#MVC-框架和库" class="headerlink" title="MVC 框架和库"></a>MVC 框架和库</h5><ul><li>angular.js – 为网络应用增强 HTML。</li><li>aurelia – 一个适用于移动设备、桌面电脑和 web 的客户端 JavaScript 框架。</li><li>backbone – 给你的 JS 应用加入带有 Models、Views、Collections 和 Events 的 Backbone。</li><li>batman.js – 最适合 Rails 开发者的 JavaScript 框架。</li><li>ember.js – 一个旨在创建非凡 web 应用的 JavaScript 框架。</li><li>meteor – 一个超简单的、数据库无处不在的、只传输数据的纯 JavaScript web 框架。</li><li>ractive – 新一代 DOM 操作。</li><li>vue – 一个用于构建可交互界面的、直观快速和可组合的 MVVM 框架。</li><li>knockout – Knockout 用 JavaScript 让创建响应式的富 UI 更加容易。</li><li>spine – 构建 JavaScript 应用的轻量 MVC 库。</li><li>espresso.js – 一个极小的、用于制作用户界面的 JavaScript 库。</li><li>canjs – 让 JS 更好、更快、更简单。</li><li>react – 用于建构用户界面的库。它是声明式的、高效的和极度灵活的，并使用虚拟 DOM 作为其不同的实现。</li><li>react-native – 一个用 React 构建原生应用的框架。</li><li>riot – 类 React 库，但很轻量。</li><li>thorax – 加强你的 Backbone。</li><li>chaplin – 使用 Backbone.js 库的 JavaScript 应用架构。</li><li>marionette – 一个 Backbone.js 的复合应用程序库，旨在简化大型 JavaScript 应用结构。</li><li>ripple – 一个小巧的、用于构建响应界面的基础框架。</li><li>rivets – 轻量却拥有强大的数据绑定和模板解决方案</li><li>derby – 让编写实时和协同应用更简单的 MVC 框架，能够在 Node.js 和浏览器同时运行。</li><li>derby-awesome – 很棒的 derby 组件集合。</li><li>way.js – 简单、轻量、持久化的双向数据绑定。</li><li>mithril.js – Mithril 是一个客户端 MVC 框架（轻量、强大和快速）</li><li>jsblocks – jsblocks 是一个更好的 MV-ish 框架。</li><li>LiquidLava – 易懂的、用于构建用户界面的 MVC 框架。</li></ul><h5 id="Node-CMS-框架"><a href="#Node-CMS-框架" class="headerlink" title="Node CMS 框架"></a>Node CMS 框架</h5><ul><li>KeystoneJS – 强大的 CMS 和 web 应用框架。</li><li>Reaction Commerce – 拥有实时的架构和设计的响应式（reactive） CMS。</li><li>Ghost – 简单、强大的发布平台。</li><li>Apostrophe – 提供内容编辑和基本服务的 CMS。</li><li>We.js – 适用于实时应用、网站或博客的框架。</li><li>Hatch.js – 拥有社交特性的 CMS 平台。</li><li>TaracotJS – 拥有快速、极简风格特点且基于Node.js 的 CMS。</li><li>Nodizecms – 为 CoffeeScript 爱好者准备的 CMS。</li><li>Cody – 拥有所见即所得的编辑器的 CMS。</li><li>PencilBlue – CMS 和博客平台。模板引擎模板引擎允许您执行字符串插值。</li><li>mustache.js – 是 JavaScript 中带有  的最简模板。</li><li>handlebars.js – 是 Mustache 模板语言的扩展。</li><li>hogan.js – 是 Mustache 模板语言的编译器。</li><li>doT – 最快速简洁的 JavaScript 模板引擎，适用于 nodejs 和浏览器。</li><li>dustjs – 适用于浏览器和 node.js 的异步模板。</li><li>eco – 嵌入式的 CoffeeScript 模板。</li><li>JavaScript-Templates – 轻量（小于 1KB）、快速且无依赖的强大 JavaScript 模版引擎。</li><li>t.js – 小巧的 JavaScript 模板框架，压缩后约为 400 字节。</li><li>Jade – 健壮的、优雅且功能丰富的 nodejs 模板引擎。</li><li>EJS – 高效的 JavaScript 模板。</li><li>xtemplate – 可扩展的模板引擎，适用于 node 和浏览器。</li><li>marko – 快速轻量且基于 HTML 的模板引擎，支持异步、流、自定义标签和 CommonJS 模编译后输出。适用于 Node.js 和浏览器。</li></ul><h5 id="文章和帖子"><a href="#文章和帖子" class="headerlink" title="文章和帖子"></a>文章和帖子</h5><ul><li>The JavaScript that you should know – 关于 JavaScript 函数化概念的文章。数据可视化Web 数据可视化工具</li><li>d3 – 一个对 HTML 和 SVG 进行可视化的 JavaScript 库。</li><li>metrics-graphics – 更简洁和拥有更规范的数据图表布局优化算法的库。</li><li>pykcharts.js – 经过精心设计后，去除 d3.js 复杂性的 d3.js 图表库。</li><li>three.js – JavaScript 3D 库。</li><li>Chart.js – 简单的、基于 canvas 标签的 HTML5 图表库。</li><li>paper.js – 是矢量图形脚本中的瑞士军刀 —— 使用 HTML5 Canvas 将 Scriptographer  移植到 JavaScript 和浏览器。</li><li>fabric.js – JavaScript Canvas 库，SVG 与 Canvas 可以相互解析。</li><li>peity – 进度条、线状和饼状图。</li><li>raphael – JavaScript 矢量库。</li><li>echarts – 商业产品图表。</li><li>vis – 动态的、基于浏览器的可视化库。</li><li>two.js – 一个渲染器无关的适用于 web 的二维绘图 api 。</li><li>g.raphael – 基于 Rapha?l 图表库。</li><li>sigma.js – 一个致力于图形绘画的 JavaScript 库。</li><li>arbor – 一个使用 web workers 和 jQuery 的图形可视化库。</li><li>cubism – 可视化时间序列的 D3 插件。</li><li>dc.js – 与 crossfilter 无缝合作的多维图表绘制库，使用 d3.js 渲染。</li><li>vega – 一套可视化语法。</li><li>processing.js – Processing.js 基于 Web 标准使数据可视化，而无需任何插件。</li><li>envisionjs – 动态的 HTML5 可视化。</li><li>rickshaw – 用于构建交互式实时图表的 JavaScript 工具包。</li><li>flot – 吸引人的、基于 jQuery 的 JavaScript 图表库。</li><li>morris.js – 漂亮的时间序列线框图。</li><li>nvd3 – 一个为 D3.js 构建可复用图表和图表组件的库。</li><li>svg.js – 一个轻量的、用于操作和添加 SVG 动画的库。</li><li>heatmap.js – 基于 HTML5 canvas 的热力图 JavaScript 库。</li><li>jquery.sparkline – 一个直接在浏览器端生成小型走势图的 jQuery 插件。</li><li>xCharts – 一个基于 D3、用于构建自定义图表和图形的库。</li><li>trianglify – 基于 d3.js 的低多边形（low poly）风格背景图片生成器。</li><li>d3-cloud – 创建词云（word cloud）效果的 JavaScript 库。</li><li>d4 – 一个基于 D3 、友好、可复用的 DSL 图表库 。</li><li>dimple.js – 基于 d3 的简易商业分析图表库。</li><li>chartist-js – 简单的响应式图表。</li><li>epoch – 一个通用的实时图表库。</li><li>c3 – 基于 D3 的可复用图表库。</li><li>BabylonJS – 一个运用 HTML5 和 WebGL 构建 3D 游戏的框架。也有一些很棒的收费库，如 amchart、plotly 和 highchart。时间轴</li><li>TimelineJS –  一个用 JavaScript 编写的可叙事时间轴库。</li><li>timesheet.js – 用于构建简单的 HTML5 &amp; CSS3 时间表的 JavaScript 库。编辑器</li><li>ace – <a href="http://Ajax.org Cloud9 Editor" target="_blank" rel="external">Ace</a>。</li><li>CodeMirror – 浏览器端的代码编辑器。</li><li>esprima – 用于综合分析的 ECMAScript 解析器。</li><li>quill – 一个带有 API 的跨浏览器富文本编辑器。</li><li><a href="http://Medium.com" target="_blank" rel="external">medium-editor</a> – 所见即所得编辑器的克隆版。</li><li>pen – 享受在线编辑（支持 markdown）。</li><li>jquery-notebook – 一个易用的、简洁优雅的文本编辑器。灵感来源于 Medium 的魅力。</li><li>bootstrap-wysiwyg – 小巧的、兼容 bootstrap 的所见即所得的富文本编辑器。</li><li>ckeditor-releases – 适用于每个人的 web 文本编辑器。</li><li>editor – 一个 markdown 编辑器，但仍在开发中。</li><li>EpicEditor – 一个可嵌入的 JavaScript Markdown 的编辑器，拥有全屏编辑、即时预览、自动保存草稿和离线支持等功能。</li><li>jsoneditor – 查看、编辑和格式化 JSON 的 web 工具。</li><li>vim.js –  拥有持久化 ~/.vimrc 的 Vim 编辑器的 JavaScript 移植版本。</li><li>Squire – HTML5 富文本编辑器。</li><li>TinyMCE – JavaScript 富文本编辑器。</li><li>trix – 由 Basecamp 制作，适用于每天写作的富文本编辑器。文件处理文件的库。</li><li>Papa Parse – 一款强大的 CSV 库，支持解析 CSV 文件/字符串，也能导出 CSV。</li><li>jBinary – 对用声明式语法描述文件类型和数据结构的二进制文件，进行高级 I/O（加载、解析、操作、序列化、存储）操作。函数式编程函数式编程库扩展了 JavaScript 的能力。</li><li>underscore – JavaScript 的实用工具。</li><li>lodash – 提供一致性、可定制、高性能和额外功能的实用库。</li><li>Sugar – 一个扩展了原生对象功能的 JavaScript 库。</li><li>lazy.js – 类似 Underscore，但性能更优越</li><li>ramda – 一个针对 JavaScript 程序员的实用函数库。</li><li>mout – 模块化的 JavaScript 工具库。</li><li>mesh – 流数据同步工具。响应式编程响应式程序库扩展了 JavaScript 的能力。</li><li>RxJs – 对 JavaScript 进行响应式扩展。</li><li>Bacon – JavaScript 的 FPR（函数式响应式编程）库。</li><li>Kefir – 受 Bacon.js 和 RxJS 启发的 FRP 库，专注于高性能和低内存消耗。</li><li>Highland – 对 JavaScript 实用工具的重新思考，Highland 能轻易地管理同步和异步信息，而且仅使用标准 JavaScript 和类 Node 流。</li><li>Most.js – 高性能 FRP 库。数据结构数据结构库用于构建一个更复杂的应用。</li><li>immutable-js – 不可变的数据集合，包括 Sequence、Range、Repeat、Map、OrderedMap、Set 和 sparse Vector。</li><li>mori – 使用 ClojureScript 持久化数据结构和支持原生 JavaScript API 的库。</li><li>buckets – 完整的、经过充分测试和记录数据结构的 JavaScript 库。</li><li>hashmap – 简单的 hashmap 实现，支持任何类型的键值。日期日期库。</li><li>moment – 解析、验证、操作和显示日期。</li><li>moment-timezone – 基于 moment.js 的时区库。</li><li>jquery-timeago – 一款支持自动更新模糊时间戳的 jQuery 插件（如：”4 分钟之前”）。</li><li>timezone-js – 让 JavaScript Date 对象拥有时区功能。使用 Olson zoneinfo 文件记录着时区数据。</li><li>date – 拥有人性化的 Date() 方法。</li><li>ms.js – 小巧的毫秒转换工具。字符串字符串库。</li><li>selecting – 一个允许你获取用户选定文本的库。</li><li>underscore.string – 扩展了 Underscore.js 的字符串操作。</li><li>string.js – 额外的 JavaScript 字符串方法。</li><li>he – 健壮的 HTML 实体编码/解码器。</li><li>multiline – 多行字符串。</li><li>query-string – 解析和字符串化 URL 查询字符串。</li><li>URI.js – URL 操作库。</li><li>jsurl – 轻量的 URL 操作库。</li><li>sprintf.js – 实现字符串格式化。</li><li>url-pattern – 让 url 和其它字符串进行比正则表达式匹配更简单。字符串和数据可相互转化。数字</li><li>Numeral-js – 对数字进行格式化和操作的库。</li><li>odometer – 流畅的数字过渡效果。</li><li>accounting.js – 对数字、金钱、货币进行格式化的轻量库——完全本地化和无依赖。</li><li>money.js – 一个小巧（1kb）的货币转换库，适用于 web 和 nodeJS。</li><li>Fraction.js – 一个有理数库。</li><li>Complex.js –  一个复数库。</li><li>Polynomial.js – 一个多项式库。存储</li><li>store.js – 为所有浏览器封装了 LocalStorage，而没有使用 cookies 和 flash。隐秘地使用 localStorage、globalStorage 和用户数据。</li><li>localForage – 改善后的离线存储。其封装了 IndexedDB、WebSQL 和 localStorage，拥有操作简单和强大的 API。</li><li>jStorage – jStorage 是一个简单的键值对数据库，用于在浏览器端存储数据。</li><li>cross-storage – 获得权限后，能跨域名本地存储。</li><li>basket.js – 用 localStorage 加载和缓存脚本的资源加载器。</li><li>bag.js – 可以缓存脚本和加载资源，与 basket.js 相似，但增加了键值对接口和对 localStorage / websql / undexedDB 的支持。</li><li>basil.js – 智能的 JavaScript 数据持久层库。</li><li>jquery-cookie – 轻量简单的、用于读取、编辑和删除 cookie 的 jQuery 插件。</li><li>Cookies – 客户端 Cookie 操作库。</li><li>DB.js – 基于 Promise 的、封装了 IndexDB 的库。</li><li>lawnchair.js – 简单的客户端 JSON 存储。颜色</li><li>randomColor – JavaScript 颜色生成器。</li><li>chroma.js – 拥有各种各样颜色操作的 JavaScript 库。</li><li>color – JavaScript 颜色转换和操作库。</li><li>colors – 更智能的默认 web 颜色。</li><li>PleaseJS – 随机创建出赏心悦目的颜色和配色方案。</li><li>TinyColor – 快速、轻巧的颜色操作和转换库。</li><li>Vibrant.js – 从图像提取主要颜色。国际化和本地化（I18n And L10n）本地化和国际化 JavaScript 库</li><li>i18next – JavaScript 最简单的国际化（i18n）方法。</li><li>polyglot – 小巧的国际化助手库。</li><li>babelfish – i18n 提供友好易懂的 API ，并且内置多种支持。类</li><li>ClassManager – 世界上最快、最方便的类系统之一。</li><li>klass – 用于创建极富表现力的类工具库。</li><li>augment – 世界上最小且最快的一流 JavaScript 继承模式。控制流</li><li>async – 适用于 node 和浏览器的异步工具库。</li><li>q – 实现异步的 promise JavaScript 库。</li><li>step – 让逻辑顺序合理化的异步控制流库。</li><li>contra – 利用函数风格实现的异步流控制。</li><li>Bluebird – 专注于革新功能和性能的，功能齐全的 promoise 库。</li><li>when – 快速可靠的、Promises/A+ 规范的 when() 实现，而且拥有异步其它的优秀特性。</li><li>ObjectEventTarget – 提供增加了事件监听的原型（与 DOMElement 的 EventTarget 在浏览器行为一致）。路由</li><li>director – 一个小巧的、与 URL 同构的路由器。</li><li>page.js – 受 Express router 启发的小型客户端路由器（约为1200字节）。</li><li>pathjs – 简单、轻量的 web 路由器。</li><li>crossroads – JavaScript 路由。</li><li>davis.js – 使用 pushState、RESTful 风格和可降级的 JavaScript 路由器。安全性</li><li>DOMPurify – 针对 HTML、MathML 和 SVG 的仅支持DOM、快速、高容错的 XSS 过滤器。</li><li>js-xss – 通过白名单配置，即可过滤不信任的 HTML（防止 XSS 攻击）。日志</li><li>log – 带有样式的 Console.log。</li><li>Conzole – 对 JavaScript 原生 console 对象方法和功能进行封装的 debug 面板，使其显示在页面内。</li><li>console.log-wrapper – 将日志清晰地记录到 console，且兼容所有浏览器。</li><li>loglevel – 最轻量的 JavaScript 日志记录工具库，向封装后可用的 console.log 方法增加可靠的日志等级。</li><li>minilog – 轻量的、用流式 API 显示的、可用于客户端和服务器端的日志记录库。正则表达式</li><li>RegEx101 – 在线的 JavaScript 正则表达式测试器和调试器。同时支持 Python、PHP 和 PCRE。</li><li>RegExr – 用于创建、测试和学习正则表达式的 HTML/JS  工具。</li><li>RegExpBuilder – 使用链式方法创建正则表达式。媒体</li><li>Ion.Sound – 可用于任何网页上简单音频。语音命令</li><li>annyang – 向网站添加语音命令的语音识别库。</li><li>voix.js – 向网站、app 或游戏添加语音命令的 JavaScript 库。API</li><li>bottleneck – 强大的频率限制器，使调节流量变得更容易。</li><li>oauth-signature-js – 适用于 node 和 浏览器的 OAuth 1.0a 签名生成器。</li><li>amygdala – 为 Web 应用提供 RESTful HTTP 客户端解决方案。</li><li>jquery.rest – 一个让 RESTful API 更易使用的 jQuery 插件。视觉检测</li><li>tracking.js – 在 web 上实现计算视觉的一种现代方法。</li><li>ocrad.js – 通过 Emscripten 用 JavaScript 实现 OCR（光学字符识别）。浏览器检测</li><li>bowser – 一个浏览器检测器。代码高亮</li><li>Highlight.js – JavaScript 语法高亮器。</li><li>PrismJS – 轻量、健壮和优雅的语法高亮器。加载状态指示加载状态的库。</li><li>Mprogress.js – 创建谷歌 Material 设计风格的线性进度条。</li><li>NProgress – 在 Ajax’y 应用显示细长型进度条</li><li>Spin.js – 一个旋转的进度指示器。</li><li>progress.js – 为页面任何对象创建和管理进度条。</li><li>progressbar.js – 用 SVG path 动画制作的、漂亮和响应式的进度条。</li><li>pace – 自动向你的网站添加一个进度条。</li><li>topbar – 小巧漂亮的、与网站同宽的进度指示器。</li><li>nanobar – 非常轻量的进度条。不依赖 jQuery。</li><li>PageLoadingEffects – 使用 SVG 动画展现新内容的现代方式。</li><li>SpinKit – 运用 CSS 动画的加载指示器集合。</li><li>Ladda – 内置在按钮的加载指示器。</li><li>css-loaders – 运用 CSS 动画的旋转加载指示器的集合。除了上述这些库，还有收藏在 Codepen 的，另外还有 Ajaxload，Preloaders 和 CSSLoad 这些生成器。验证</li><li>Parsley.js – 不用写一行 JavaScript 代码即可在前端验证表单。</li><li>jquery-validation – jQuery 验证插件。</li><li>validator.js – 字符串验证和过滤（在使用用户输入之前清理用户输入中的有害或危险字符的操作）。</li><li>validate.js – 受 CodeIgniter 启发的轻量表单验证 JavaScript 库。</li><li>validatr – 跨浏览器的 HTML5 表单验证库。</li><li>BootstrapValidator – 是验证表单域中最好的 jQuery 插件。要与 Bootstrap 3 一起使用。</li><li>is.js – 检查类型、正则表达式、是否存在、时间等。</li><li>FieldVal – 多用途验证库。同时支持同步和异步验证。键盘封装器</li><li>mousetrap – 处理键盘快捷键的 JavaScript 库。</li><li>keymaster – 定义和调度键盘快捷键的小型库。</li><li>Keypress – 键入捕捉工具库，任何键都可以成为一个修饰健。</li><li>KeyboardJS – 一个用于绑定键盘组合的 JavaScript 库，让你脱离快捷键和快捷键组合冲突的痛苦。</li><li>jquery.hotkeys – jQuery Hotkeys 能让你在代码任何的地方监听键盘事件，并几乎支持所有按键组合。</li><li>jwerty – 令人惊叹的键盘事件处理库。浏览和引导</li><li>intro.js – 这是一个介绍新功能的很好方式，能一步步地引导用户浏览你的网站和项目。</li><li>shepherd – 通过引导让用户浏览你的应用程序。</li><li>bootstrap-tour – 应用 Twitter Bootstrap 弹出框对产品进行快速简单的引导。</li><li>tourist – 简单、灵活的应用引导介绍库。</li><li>chardin.js – 简单的应用遮罩层介绍。</li><li>pageguide – 使用 jQuery 和 CSS3 的 web 页面元素交互引导库。</li><li>hopscotch – 让开发者更容易向其页面产品添加引导的框架。</li><li>joyride – 基于 jQuery 的功能引导插件。</li><li>focusable – 通过向页面其余部分添加遮罩层，使焦点聚集在特定 DOM 元素。通知</li><li>messenger – 为你的应用添加 Growl-style 弹框和信息（Crowl 是 Mac OS X 下的一个通知系统）。</li><li>noty – jQuery 通知插件。</li><li>pnotify – 适用于 Bootstrap、jQuery UI 和 Web Notifications Draft 的 JavaScript 通知库。</li><li>toastr – 简单的弹出框通知（toast notifications：用来显示简单的，会自动到期的信息窗口）。</li><li>humane-js – 一个简单、时髦的浏览器通知系统。</li><li>smoke.js – 与框架无关的、能够自定义样式的 JavaScript 弹框系统。幻灯片</li><li>Swiper – 使用硬件加速过渡的移动设备触控滑块框架。</li><li>slick – 你所需要的最后一个轮播插件。</li><li>slidesJs – 响应式的 jQuery（1.7.1+）幻灯片插件，具有触摸、 CSS3 过渡等特性。</li><li>FlexSlider – 一款令人惊叹的、全响应式的幻灯片 jQuery 插件。</li><li>unslider – 最简单的幻灯片 jQuery 插件。</li><li>colorbox – 轻量、可自定义的灯箱 jQuery 插件。</li><li>fancyBox – 提供了良好优雅的方式，为页面上的图片、html 内容和多媒体添加缩放功能的工具。</li><li>sly – 基于项导航的、支持单向滚动的 JavaScript 库。</li><li>vegas – 向页面添加漂亮的全屏背景的 jQuery 插件，甚至允许幻灯片。</li><li>Sequence – 用于创建响应式的幻灯片、演示、旗帜广告和以步骤为基础的应用的 CSS 动画框架。</li><li>baguetteBox.js – 易于使用的、用纯 JavaScript 实现的遮罩层脚本。</li><li>reveal.js – 用 HTML 创建漂亮演示控件的框架。</li><li>PhotoSwipe – 适用于移动设备和桌面电脑的、模块化和不无依赖框架的 JavaScript 画廊控件。</li><li>jcSlider – 用 CSS 动画实现的响应式幻灯片 jQuery 插件。</li><li>basic-jquery-slider – 易于使用、指定主题和定制化。</li><li>unslider –  这是最简单的幻灯片 jQuery 插件。</li><li>jQuery.adaptive-slider – 带有自适应颜色标题和导航的幻灯片 jQuery 插件。</li><li>slidr – 可添加一些幻灯片效果。</li><li>Flickity – 可触摸的、响应式的和可轻弹的画廊。滑块控件</li><li>Ion.RangeSlider – 强大的、易于自定义的范围滑块选择库，支持很多配置和皮肤。</li><li>jQRangeSlider – 支持日期的滑块选择库。</li><li>noUiSlider – 轻量无冗余的、高度定制化的滑块选择库。</li><li>rangeslider.js – HTML5  input 区域滑块元素。表单组件输入</li><li>typeahead.js – 快速的、功能齐全的自动补全库。</li><li>tag-it – 处理多标签字段以及标签建议/自动完成的 jQuery UI 插件。</li><li>At.js – 向你的应用添加类似 Github 的自动完成提示功能。</li><li>Placeholders.js – JavaScript 补全 HTML5 占位符的属性。</li><li>fancyInput – 利用 CSS3 效果让输入更有趣。</li><li>jQuery-Tags-Input – 利用这个 jQuery 插件，可奇妙地将一个简单的文本输入转换成一个酷酷的标签列表。</li><li>vanilla-masker – 一个纯 JavaScript 实现的输入控制库。</li><li>Ion.CheckRadio – 一个为复选框和单选按钮添加样式的 jQuery 库，支持多种皮肤。日历</li><li>pickadate.js – 对移动设备友好的、响应式的和轻量的 jQuery 日期 &amp; 时间输入选择器。</li><li>bootstrap-datepicker – 基于 bootstrap 的日历选择器。</li><li>Pikaday – 一个崭新的 JavaScript 日期选择器 —— 轻量、无依赖和模块化的 CSS。</li><li>fullcalendar – 全尺寸、支持拖放事件的日历（jQuery 插件）。</li><li>rome – 可定制的日期（和时间）选择器。无依赖，可选 UI。</li><li>datedropper –  datedropper 是一个 jQuery 插件，它提供了快速简易的方式去管理日期输入框。选择</li><li>selectize.js – Selectize 是文本框和选择框的混合体。它基于jQuery，拥有自动完成和键盘感应下拉列表功能，可用于标签、联系人列表等。</li><li>select2 – 它基于 jQuery，是选择框（select box）的替代品。支持搜索、远程数据集和无限滚动。</li><li>chosen – 可以让冗长不便的选择框更友好的库。文件上传</li><li>jQuery-File-Upload – File Upload 是一个支持多文件选择、文件拖放、进度条、验证和图片、音频、视频预览的 jQuery 插件。</li><li>dropzone – Dropzone 是一个易于使用且支持多文件拖放的库。其支持图片预览并且拥有很好的进度条效果。</li><li>flow.js – 一个通过 HTML5 的 File API ，提供多个同时链接的、稳定的、容错的、可恢复的/可重新开始的文件上传库。</li><li>fine-uploader – 一个带有进度条、拖放功能和支持直接上传到 S3 （Amazon Simple Storage Service，亚马逊简易存储服务）的多文件上传插件。</li><li>FileAPI – JavaScript 文件工具集合。支持多文件上传、拖放和文件分块上传。对于图像，支持裁剪、调整大小和根据 EXIF 自动调整方向。</li><li>plupload – 处理文件上传的 JavaScript API，其支持多文件选择、文件类型过滤、分块请求、客户端图片缩放和根据不同的运行环境选择 HTML5、Silverlight 和 Flash。其它</li><li>form – jQuery 表单插件。</li><li>Garlic.js – 自动在本地保存表单文本和选择框的值，直到表单被提交。</li><li>Countable – 对某个 HTML 元素包含文本的段落数、单词数和字符数进行统计的 JavaScript 函数。</li><li>card – 只需一行代码，让信用卡表单变得更友好。</li><li>stretchy – 自适应大小的 form 元素，表单本应该是这样的。</li><li>list.js – 向表格、列表等 HTML 元素添加搜索、排序、过滤和自适应功能的库。在已有 HTML 上增加可视化。提示</li><li>tipsy – 基于 jQuery 的 Fackbook 风格的提示工具（tooltip）。</li><li>opentip – 开源且基于 prototype 框架的 JavaScript 工具提示库。</li><li>qTip2 – 非常强大的工具提示库。</li><li>tooltipster – 一个工具提示 jQuery 插件。</li><li>simptip – 用 Sass 制作的、简单的工具提示。</li><li>jquery-popup-overlay – 是一个响应式的和可访问性强的模态框（modal）和工具提示框 jQuery 插件。模态框和弹出框（Modals and Popups）</li><li>Magnific-Popup – 专注于性能、轻量、响应式的灯箱（lightbox）脚本。</li><li>jquery-popbox – jQuery 提示框插件。</li><li>jquery.avgrund.js – 一种新的定于弹出的模态框 jQuery 插件。</li><li>vex – 新的、拥有高度可配置和易于改变样式功能的对话框库。</li><li>bootstrap-modal – 对 Bootstrap 默认的模态框类进行扩展。其支持响应式、可堆叠和 ajax 等。</li><li>css-modal – 纯 CSS 打造的模态框。</li><li>jquery-popup-overlay – 是一个响应式的和可访问性强的模态框和工具提示框（tooltips）jQuery 插件。滚动</li><li>scrollMonitor – 滚动发生时，可以监听元素的、简单、快速的 API。</li><li>headroom – 除非你需要显示页面头部（header），否则将隐藏它，以腾出页面头部空间。</li><li>onepage-scroll – 创建一个类似 Apple 的单页面滚动网站（iPhone 5S  网站）。</li><li>iscroll – 高性能、轻量、无依赖、兼容多平台的 JavaScript 滚动组件。</li><li>skrollr – 独立（不依赖 jQuery） 的视差滚动库，适用于移动设备（Android + iOS）和桌面电脑。</li><li>parallax – 面向智能设备的视差引擎。</li><li>stellar.js – 让视差滚动变简单。</li><li>plax – 基于 jQuery 的视差库。</li><li>jparallax – 创建可交互视差效果的 jQuery 插件。</li><li>fullPage – 简单和易于使用的、用于创建全屏滚动网站的插件（也被称为单页面网站）。</li><li>ScrollMenu – 让老旧无聊的滚动条焕然一新。菜单</li><li>jQuery-menu-aim – 当用户光标放在特定下拉菜单项时触发事件。可制作响应式的、大数据量的下拉菜单，如 Amazon 的。</li><li>jQuery contextMenu – 右键菜单（contextMenu） 管理工具。</li><li>Slideout – 为移动设备的 web 应用制作出响应式的、可触摸滑出的导航菜单。</li><li>Slide and swipe – 一个基于 touchSwipe 库的滑出菜单插件。表格/网格</li><li>jTable – 基于 CRUD 表创建 AJAX 的 jQuery 插件。</li><li>DataTables – 这是一个非常灵活的工具，在渐进增强的基础上，将高级的交互效果加到 HTML 表格。（jQuery 插件）</li><li>floatThead – （jQuery 插件）锁定表格头部，只允许表格内容滚动。适用于任何表格，而且不需要额外的 html 或 css。</li><li>Masonry – 瀑布流式的网格布局库。</li><li>Packery – 使用装箱算法（bin-packing）的网格布局库。支持拖拽布局。</li><li>Isotope – 可过滤和可排序的网格布局的库，它能实现 Masonry、Packery 等布局。框架</li><li>Semantic UI – 拥有大量主题和元素的 UI 套件。手势</li><li>hammer.js – 拥有多种触摸手势的 JavaScript 库。</li><li>touchemulator – 在桌面电脑模仿触摸输入。</li><li>Dragula – 超级易于使用的拖拽库。地图</li><li>Leaflet – 对移动设备友好的、可交互的地图 JavaScript 库。</li><li>Cesium – 开源的、基于 WebGL 实现的虚拟地球仪和地图引擎。</li><li>gmaps – 以最简单的方式使用 Google 地图。</li><li>polymaps – 一个免费的、兼容现代 web 浏览器的、用于制作动态可交互的地图 JavaScript 库。</li><li>kartograph.js – 开源的 Kartograph SVG 地图渲染器。</li><li>mapbox.js – Mapbox 的 API，Leaflet 的插件。</li><li>jqvmap – 矢量地图 jQuery 插件。</li><li>OpenLayers3 – 高性能的、功能丰富的库，能满足你对地图所有需求。视频/音频</li><li>prettyembed.js – 更完美地嵌入 YouTube —— 拥有很好的选项，如高分辨率的预览图、嵌入选项的高级定制和可选的 FitVids 支持。</li><li>html5media – 能在所有主流浏览器播放多媒体标签中定义的多媒体文件。HTML5 video and audio tags in all major browsers</li><li>Play-em JS – Play’em 是一个 JavaScript 组件，它能管理音乐/视频播放顺序，通过在一个 DIV 元素里嵌入几个播放器（Youtube、Soundcloud 和 Vimeo）来控制一系列歌曲的播放。</li><li>polyplayer – 将 YouTube、Soundcloud 和 Vimeo 播放器的 API 统一成一套。</li><li>flowplayer –  HTML5 视频播放器 Flowplayer</li><li>mediaelement – 让 HTML5、 Flash 播放器和模仿 HTML5 媒介元素 API 的 Silverlight shim，在所有浏览器拥有一致的 UI。MediaElement.js</li><li>SoundJS – 让音频在 web 上运行更简单的库。它为不同浏览器提供了一致的 API。动画</li><li>velocity – 加速 JavaScript 动画。</li><li>jquery.transit – 拥有超级流畅的 CSS3 变换和过渡的 jQuery 插件。</li><li>impess.js – 在 HTML 文档里，运用 CSS3 变换和过渡制作类似 Prezi 的展现效果。</li><li>bounce.js – 可以立刻创建有趣的 CSS3 动画。</li><li>GreenSock-JS – 适用于所有主流浏览器的高性能 HTML5 动画。</li><li>TransitionEnd – TransitionEnd 是一个运用 transitonend 事件的、跨浏览器的库。</li><li>Dynamic.js – 用于创建基于物理知识的 CSS 动画库。图像处理</li><li>lena.js – 拥有滤镜和实用功能的图像处理库。</li><li>pica – 高质量地调整图片大小（拥有快速的、纯 JS 实现的 Lanczos 滤镜算法）。</li><li>cropper – 一个简单的图像裁剪 jQuery 插件。</li></ul><h5 id="ECMAScript-6"><a href="#ECMAScript-6" class="headerlink" title="ECMAScript 6"></a>ECMAScript 6</h5><ul><li>es6features – ECMAScript 6 特性概述。</li><li>es6-features – ECMAScript 6:  特性概述和比较。</li><li>ECMAScript 6 compatibility table – Compatibility tables 展示了各种平台上所有 ECMAScript 6 特性的支持程度。</li><li>Babel (Formerly 6to5) – 将 ES6+ 代码转换成纯 ES5。</li><li>Traceur compiler – ES6 特性转 ES5。包括 classes、generators、promises、destructuring patterns、default parameters 等。软件开发工具包</li><li>javascript-sdk-design – 从工作和个人经验中提炼出来的 JavaScript SDK 设计指导。</li></ul><h5 id="大杂烩"><a href="#大杂烩" class="headerlink" title="大杂烩"></a>大杂烩</h5><ul><li>echo – 利用 data-*属性延迟加载图片。</li><li>picturefill – 响应式图片显示插件，使浏览器支持 srcset、size 属性。</li><li>platform.js – 一个平台检测库，几乎适用于所有 JavaScript 平台。</li><li>json3 – 一个现代 JSON 实现库，几乎兼容所有 JavaScript 平台。</li><li>Logical Or Not – 一个关于 JavaScript 特性的游戏。</li><li>BitSet.js – 实现位向量的 JavaScript 库。</li></ul><p>转载自：<a href="https://www.zhihu.com/question/50101747/answer/119341223" target="_blank" rel="external">原地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitHub 上有一个 Awesome – XXX 系列的资源整理。awesome-javascript 是 sorrycc 发起维护的 JS 资源列表，内容包括：包管理器、加载器、测试框架、运行器、QA、MVC框架和库、模板引擎、数据可视化、时间轴、编辑器等等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JS大全" scheme="https://peggy3399.github.io/tags/JS%E5%A4%A7%E5%85%A8/"/>
    
      <category term="包管理器" scheme="https://peggy3399.github.io/tags/%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
      <category term="加载器" scheme="https://peggy3399.github.io/tags/%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
    
      <category term="测试框架" scheme="https://peggy3399.github.io/tags/%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    
      <category term="运行器" scheme="https://peggy3399.github.io/tags/%E8%BF%90%E8%A1%8C%E5%99%A8/"/>
    
      <category term="QA" scheme="https://peggy3399.github.io/tags/QA/"/>
    
      <category term="MVC框架和库" scheme="https://peggy3399.github.io/tags/MVC%E6%A1%86%E6%9E%B6%E5%92%8C%E5%BA%93/"/>
    
      <category term="模板引擎" scheme="https://peggy3399.github.io/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
      <category term="数据可视化" scheme="https://peggy3399.github.io/tags/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="时间轴" scheme="https://peggy3399.github.io/tags/%E6%97%B6%E9%97%B4%E8%BD%B4/"/>
    
      <category term="编辑器" scheme="https://peggy3399.github.io/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="https://peggy3399.github.io/2017/12/28/webpack/"/>
    <id>https://peggy3399.github.io/2017/12/28/webpack/</id>
    <published>2017-12-28T07:50:08.000Z</published>
    <updated>2017-12-28T08:24:00.554Z</updated>
    
    <content type="html"><![CDATA[<p>webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。<br>我们可以直接使用 require(XXX) 的形式来引入各模块，即使它们可能需要经过编译（比如JSX和sass），但我们无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader）在默默处理这些事情，这块我们后续会提到。</p><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code>$ npm install webpack -g当然如果常规项目还是把依赖写入 package.json 包去更人性化：$ npm init$ npm install webpack --save-dev</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>每个项目下都必须配置有一个 webpack.config.js ，它的作用如同常规的 gulpfile.js ，就是一个配置项，告诉 webpack 它需要做什么。示例：</p><pre><code>var webpack = require(&apos;webpack&apos;);var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&apos;common.js&apos;);module.exports = {    plugins: [commonsPlugin],    entry: {        index : &apos;./src/js/page/index.js&apos;    },    output: {        path: &apos;dist/js/page&apos;,        filename: &apos;[name].js&apos;    },    module: {        loaders: [            { test: /\.css$/, loader: &apos;style-loader!css-loader&apos; },            { test: /\.js$/, loader: &apos;jsx-loader?harmony&apos; },            { test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;},            { test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos;}        ]    },    resolve: {        root: &apos;E:/github/flux-example/src&apos;, //绝对路径        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;],        alias: {            AppStore : &apos;js/stores/AppStores.js&apos;,            ActionType : &apos;js/actions/ActionType.js&apos;,            AppAction : &apos;js/actions/AppAction.js&apos;        }    }};</code></pre><ul><li>plugins: 这里定义了需要使用的插件，比如commonsPlugin在打包多个入口文件时会提取出公用的部分，生成common.js</li><li>entry：指定打包的入口文件，每有一个键值对，就是一个入口文件</li><li>output：配置打包结果，path定义了输出的文件夹，filename则定义了打包结果文件的名称，filename里面的[name]会由entry中的键（这里是entry1和entry2）替换</li><li>resolve：定义了解析模块路径时的配置，常用的就是extensions，可以用来指定模块的后缀，这样在引入模块时就不需要写后缀了，会自动补全</li><li>module：定义了对模块的处理逻辑，这里可以用loaders定义了一系列的加载器，以及一些正则。当需要加载的文件匹配test的正则时，就会调用后面的loader对文件进行处理，这正是webpack强大的原因。比如这里定义了凡是.js结尾的文件都是用babel-loader做处理，而.jsx结尾的文件会先经过jsx-loader处理，然后经过babel-loader处理。当然这些loader也需要通过npm install安装</li></ul><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>直接在项目的根目录下运行:</p><pre><code>$ webpack</code></pre><p>也可以添加运行，为了方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。</p><pre><code>$ webpack --display-error-details</code></pre><p>如果不想要每修改模块一次都打包的话，可以使用webpack-dev-server。它将在 localhost:8080 启动一个 express 静态资源 web 服务器，并且会以监听模式自动运行 webpack。</p><pre><code># 安装$ npm install webpack-dev-server -g# 运行webpack-dev-server --progress --colors</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。&lt;br&gt;我们可以直接使用 require(XXX) 的形式来引入各模块，即使它们可能需要经过编译（比如JSX和sass），但我们无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader）在默默处理这些事情，这块我们后续会提到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://peggy3399.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue-component</title>
    <link href="https://peggy3399.github.io/2017/12/28/vue-component/"/>
    <id>https://peggy3399.github.io/2017/12/28/vue-component/</id>
    <published>2017-12-28T07:48:31.000Z</published>
    <updated>2017-12-28T08:24:18.690Z</updated>
    
    <content type="html"><![CDATA[<p>Vue的<a href="https://vuefe.cn/guide/components.html" target="_blank" rel="external">组件</a>化功能可谓是它的一大亮点，通过将页面上某一组件的html、CSS、js代码放入一个.vue的文件中进行管理可以大大提高代码的维护性。<br>目前直接使用ES6的模块化功能，再结合Webpack进行相应打包是最热门的方案。</p><a id="more"></a><h4 id="基本写法："><a href="#基本写法：" class="headerlink" title="基本写法："></a>基本写法：</h4><pre><code>// App.vue&lt;template&gt;    &lt;div class=&quot;box&quot; v-text=&quot;note&quot;&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    data () {        return {            note: &apos;这是一个组件的html模板！&apos;        }    }}&lt;/script&gt;&lt;style&gt;.box {    color: #000;}&lt;/style&gt;</code></pre><blockquote><p>data 必须是函数。</p></blockquote><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><p>注册全剧组件可以用 Vue.component(tag, constructor) 。</p><pre><code>例如： Vue.component(&apos;my-component&apos;, {          // 选项        })</code></pre><p>组件在注册之后，才可以在父实例的模块中以自定义元素 <code>&lt;my-component&gt;</code> 的形式使用(组件名最好使用小写，并且包含一个短杠)。</p><pre><code>&lt;div id=&quot;example&quot;&gt;  &lt;my-component&gt;&lt;/my-component&gt;&lt;/div&gt;// 注册Vue.component(&apos;my-component&apos;, {  template: &apos;&lt;div&gt;A custom component!&lt;/div&gt;&apos;})// 创建根实例new Vue({  el: &apos;#example&apos;})</code></pre><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><p>  用实例选项 components 注册局部组件。局部注册只能在对应的Vue实例下使用，所以它不能在其它Vue实例下使用。</p><pre><code>例如：var Child = {        template: &apos;&lt;div&gt;A custom component!&lt;/div&gt;&apos;      }      new Vue({        // ...        components: {          // &lt;my-component&gt; 将只在父模板可用          &apos;my-component&apos;: Child        }      })</code></pre><h4 id="传递信息"><a href="#传递信息" class="headerlink" title="传递信息"></a>传递信息</h4><p>在 Vue.js 中，父子组件的关系可以总结为 props down, events up 。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息。</p><ul><li>Props</li></ul><p>组件实例的作用域是孤立的。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用 props 把数据传给子组件。</p><pre><code>Vue.component(&apos;child&apos;, {  // 声明 props  props: [&apos;message&apos;],  // 就像 data 一样，prop 可以用在模板内  // 同样也可以在 vm 实例中像 “this.message” 这样使用  template: &apos;&lt;span&gt;{{ message }}&lt;/span&gt;&apos;})</code></pre><p>props也可以用 v-bind 绑定动态 props 到父组件的数据。每当父组件的数据变化时，也会传导给子组件。</p><pre><code>&lt;div&gt;  &lt;input v-model=&quot;parentMsg&quot;&gt;  &lt;br&gt;  &lt;child :my-message=&quot;parentMsg&quot;&gt;&lt;/child&gt;&lt;/div&gt;</code></pre><blockquote><p>如果要子组件把数据传递给父组件，就需要<a href="https://vuefe.cn/guide/components.html#自定义事件" target="_blank" rel="external">自定义事件</a>。</p></blockquote><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><p>如果想要动态切换不同的组件，就需要使用动态组件，动态地绑定到它的 is 特性。</p><pre><code>var vm = new Vue({  el: &apos;#example&apos;,  data: {    currentView: &apos;home&apos;  },  components: {    home: { /* ... */ },    posts: { /* ... */ },    archive: { /* ... */ }  }})&lt;component v-bind:is=&quot;currentView&quot;&gt;  &lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;&lt;/component&gt;</code></pre><p>如果把切换出去的组件想要保留它的状态或避免重新渲染，添加keep-alive指令参数，非活动组件将被缓存。</p><pre><code>&lt;keep-alive&gt;  &lt;component :is=&quot;currentView&quot;&gt;    &lt;!-- 非活动组件将被缓存！ --&gt;  &lt;/component&gt;&lt;/keep-alive&gt;</code></pre><h4 id="Slots分发内容"><a href="#Slots分发内容" class="headerlink" title="Slots分发内容"></a>Slots分发内容</h4><p>一种方式用来混合父组件的内容与子组件自己的模板。比如说：</p><pre><code>&lt;app&gt;  &lt;app-header&gt;&lt;/app-header&gt;  &lt;app-footer&gt;&lt;/app-footer&gt;&lt;/app&gt;</code></pre><p>app也有自己的模板内容，这时候就需要用到slots。</p><ul><li>编辑作用域</li></ul><p>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。</p><p>分发内容就是在父组件作用域内编译。</p><ul><li>单个Slot</li></ul><p>子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。</p><p>子组件<code>&lt;my-component&gt;</code>：</p><pre><code>&lt;div&gt;    &lt;h2&gt;I&apos;m the child title&lt;/h2&gt;    &lt;slot&gt;      如果没有分发内容则显示我。    &lt;/slot&gt;&lt;/div&gt;</code></pre><p>父组件：</p><pre><code>&lt;div&gt;    &lt;h1&gt;I&apos;m the parent title&lt;/h1&gt;    &lt;my-component&gt;      &lt;p&gt;This is some original content&lt;/p&gt;      &lt;p&gt;This is some more original content&lt;/p&gt;    &lt;/my-component&gt;&lt;/div&gt;</code></pre><p>渲染结果：</p><pre><code>&lt;div&gt;    &lt;h1&gt;I&apos;m the parent title&lt;/h1&gt;    &lt;div&gt;      &lt;h2&gt;I&apos;m the child title&lt;/h2&gt;      &lt;p&gt;This is some original content&lt;/p&gt;      &lt;p&gt;This is some more original content&lt;/p&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><ul><li>具名Slots</li></ul><p>就是带有name的slot,根据name,对应替换slot。可以有一个匿名 slot ，它是默认 slot ，作为找不到匹配的内容片段的备用插槽。没有备用插槽内容则被抛弃。</p><p>组件<code>&lt;app-layout&gt;</code>:</p><pre><code>&lt;div class=&quot;container&quot;&gt;    &lt;header&gt;      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;    &lt;/header&gt;    &lt;main&gt;      &lt;slot&gt;&lt;/slot&gt;    &lt;/main&gt;    &lt;footer&gt;      &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;    &lt;/footer&gt;&lt;/div&gt;</code></pre><p>父组件模版：</p><pre><code>&lt;app-layout&gt;    &lt;h1 slot=&quot;header&quot;&gt;Here might be a page title&lt;/h1&gt;    &lt;p&gt;A paragraph for the main content.&lt;/p&gt;    &lt;p&gt;And another one.&lt;/p&gt;    &lt;p slot=&quot;footer&quot;&gt;Here&apos;s some contact info&lt;/p&gt;&lt;/app-layout&gt;</code></pre><p>渲染结果：</p><pre><code>&lt;div class=&quot;container&quot;&gt;    &lt;header&gt;      &lt;h1&gt;Here might be a page title&lt;/h1&gt;    &lt;/header&gt;    &lt;main&gt;      &lt;p&gt;A paragraph for the main content.&lt;/p&gt;      &lt;p&gt;And another one.&lt;/p&gt;    &lt;/main&gt;    &lt;footer&gt;      &lt;p&gt;Here&apos;s some contact info&lt;/p&gt;    &lt;/footer&gt;&lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue的&lt;a href=&quot;https://vuefe.cn/guide/components.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;组件&lt;/a&gt;化功能可谓是它的一大亮点，通过将页面上某一组件的html、CSS、js代码放入一个.vue的文件中进行管理可以大大提高代码的维护性。&lt;br&gt;目前直接使用ES6的模块化功能，再结合Webpack进行相应打包是最热门的方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://peggy3399.github.io/tags/vue/"/>
    
      <category term="component" scheme="https://peggy3399.github.io/tags/component/"/>
    
  </entry>
  
  <entry>
    <title>vue-router</title>
    <link href="https://peggy3399.github.io/2017/12/28/vue-router/"/>
    <id>https://peggy3399.github.io/2017/12/28/vue-router/</id>
    <published>2017-12-28T07:47:36.000Z</published>
    <updated>2018-06-12T01:56:59.414Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><pre><code>npm install vue-router --save</code></pre><p>vue路由主要就是通过使用 router-link(默认会被渲染成一个 <code>&lt;a&gt;</code> 标签) 组件来导航，通过传入 <code>to</code> 属性指定链接, 最后渲染在<code>&lt;router-view&gt;</code>中，实现SPA。</p><pre><code>&lt;p&gt;    &lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt;&lt;/p&gt;&lt;router-view&gt;&lt;/router-view&gt;</code></pre><a id="more"></a><p>我目前了解的主要是webpack + ES2015实现vue。如果要实现路由，文件基本写法就是：</p><ul><li>调用 Vue.use(VueRouter)</li><li>定义路由组件(import导入需要渲染的组件)</li><li>定义路由</li><li>创建router实例</li><li>创建挂载根实例(就是路由最终在页面实现的根元素)</li></ul><h4 id="基本写法："><a href="#基本写法：" class="headerlink" title="基本写法："></a>基本写法：</h4><pre><code>import Vue from &apos;vue/dist/vue&apos;import VueRouter from &apos;vue-router&apos;// 1. Use plugin.// This installs &lt;router-view&gt; and &lt;router-link&gt;,// and injects $router and $route to all router-enabled child componentsVue.use(VueRouter)// 2. Define route componentsconst Home = { template: &apos;&lt;div&gt;home&lt;/div&gt;&apos; }const Foo = { template: &apos;&lt;div&gt;foo&lt;/div&gt;&apos; }const Bar = { template: &apos;&lt;div&gt;bar&lt;/div&gt;&apos; }// 3. Create the routerconst router = new VueRouter({  mode: &apos;history&apos;,  base: __dirname,  routes: [    { path: &apos;/&apos;, component: Home },    { path: &apos;/foo&apos;, component: Foo },    { path: &apos;/bar&apos;, component: Bar }  ]})// 4. Create and mount root instance.// Make sure to inject the router.// Route components will be rendered inside &lt;router-view&gt;.new Vue({  router,  template: `    &lt;div id=&quot;app&quot;&gt;      &lt;h1&gt;Basic&lt;/h1&gt;      &lt;ul&gt;        &lt;li&gt;&lt;router-link to=&quot;/&quot;&gt;/&lt;/router-link&gt;&lt;/li&gt;        &lt;li&gt;&lt;router-link to=&quot;/foo&quot;&gt;/foo&lt;/router-link&gt;&lt;/li&gt;        &lt;li&gt;&lt;router-link to=&quot;/bar&quot;&gt;/bar&lt;/router-link&gt;&lt;/li&gt;      &lt;/ul&gt;      &lt;router-view class=&quot;view&quot;&gt;&lt;/router-view&gt;    &lt;/div&gt;  `}).$mount(&apos;#app&apos;)</code></pre><ul><li>mode(模式)选项取值为： (默认是 “hash”):</li><li>“hash” ：hash就是利用#做路由切换</li><li>“history” ：history是利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。（需要后台配置）</li><li>“abstract” ：abstract一样，只不过，history会记录历史位置</li><li>base：用的基路径。例如，如果整个单页应用服务在 /app/ 下，然后 base 就应该设为 “/app/“。</li><li>linkActiveClass：全局配置 <code>&lt;router-link&gt;</code> 的默认『激活 class 类名』</li><li>scrollBehavior 滚动行为</li></ul><blockquote><p>注意: 这个功能只在 HTML5 history 模式下可用。</p></blockquote><pre><code>const router = new VueRouter({  routes: [...],  scrollBehavior (to, from, savedPosition) {    // return 期望滚动到哪个的位置  }})</code></pre><p>例子1：对于所有路由导航，简单地让页面滚动到顶部。</p><pre><code>scrollBehavior (to, from, savedPosition) {    return { x: 0, y: 0 }}</code></pre><p>例子2：返回 savedPosition，在按下 后退/前进 按钮时，就会像浏览器的原生表现那样：</p><pre><code>scrollBehavior (to, from, savedPosition) {    if (savedPosition) {        return savedPosition    } else {        return { x: 0, y: 0 }    }}</code></pre><p>例子3：模拟『滚动到锚点』的行为：</p><pre><code>scrollBehavior (to, from, savedPosition) {    if (to.hash) {        return {          selector: to.hash        }    }}</code></pre><blockquote><p><a href="https://github.com/vuejs/vue-router/blob/next/examples/scroll-behavior/app.js" target="_blank" rel="external">一个完整例子</a></p></blockquote><h4 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h4><p><code>&lt;router-link&gt;</code>还有以下属性参数：</p><ul><li>to: 表示目标路由的链接。当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。</li><li>tag: 渲染为的 html 元素类型，默认是<code>&lt;a&gt;</code>.</li><li>exact: 用于控制当前激活项的匹配行为。<br>举个例子，如果当前的路径是 /a 开头的，那么<code>&lt;router-link to=&quot;/a&quot;&gt;</code> 也会被设置 CSS 类名。</li><li>append: 设置 append 属性后，则在当前（相对）路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b。</li><li>replace: 设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，于是导航后不会留下 history 记录。</li><li>active-class: 当链接项激活时增加的 CSS 样式，默认值: “router-link-active”。</li></ul><blockquote><p>用<code>&lt;router-link&gt;</code>可以渲染外层元素，包裹着内层的原生 <code>&lt;a&gt;</code> 标签。</p></blockquote><h4 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h4><p>就是组件被渲染时要填的坑。</p><ul><li>路由嵌套</li></ul><p>如果使用路由的嵌套，组件包含自己的嵌套 <code>&lt;router-view&gt;</code>就可以。</p><pre><code>const User = {  template: `    &lt;div class=&quot;user&quot;&gt;      &lt;h2&gt;User {{ $route.params.id }}&lt;/h2&gt;      &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;  `}</code></pre><p>这时就需要在路由路径配置当中，写上children，然后进行组件自己的路由，children 配置就是像 routes 配置一样的路由配置数组。</p><pre><code>const router = new VueRouter({  routes: [    { path: &apos;/user/:id&apos;, component: User,      children: [        {          // 当 /user/:id/profile 匹配成功，          // UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中          path: &apos;profile&apos;,          component: UserProfile        },        {          // 当 /user/:id/posts 匹配成功          // UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中          path: &apos;posts&apos;,          component: UserPosts        }      ]    }  ]})</code></pre><ul><li>命名视图</li></ul><p>想同时（同级）展示多个视图，而不是嵌套展示,这时可以设置多个出口，也就是<code>&lt;router-view &gt;</code>，如果 <code>&lt;router-view &gt;</code> 没有设置名字，那么默认为 default。</p><pre><code>&lt;router-view class=&quot;view one&quot;&gt;&lt;/router-view&gt;&lt;router-view class=&quot;view two&quot; name=&quot;a&quot;&gt;&lt;/router-view&gt;&lt;router-view class=&quot;view three&quot; name=&quot;b&quot;&gt;&lt;/router-viewconst router = new VueRouter({  routes: [    {      path: &apos;/&apos;,      components: {        default: Foo,        a: Bar,        b: Baz      }    }  ]})</code></pre><h4 id="router的重定向和别名"><a href="#router的重定向和别名" class="headerlink" title="router的重定向和别名"></a>router的重定向和别名</h4><ul><li>重定向</li></ul><p>重定向我的理解就是重新定方向，本来路由要走的/a这个路由，由于重定向就会改变为/b。写法:</p><pre><code>{ path: &apos;/a&apos;, redirect: &apos;/b&apos; }</code></pre><p>也可以是有name的路由：</p><pre><code>{ path: &apos;/a&apos;, redirect: { name: &apos;foo&apos; }}</code></pre><p>甚至是一个方法，动态返回重定向目标：</p><pre><code>const router = new VueRouter({  routes: [    { path: &apos;/a&apos;, redirect: to =&gt; {      // 方法接收 目标路由 作为参数      // return 重定向的 字符串路径/路径对象    }}  ]})</code></pre><blockquote><p><a href="https://github.com/vuejs/vue-router/blob/next/examples/redirect/app.js" target="_blank" rel="external">一个好的例子</a></p></blockquote><ul><li>别名</li></ul><p>别名就类似于我们的小名，/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。写法：</p><pre><code>{ path: &apos;/a&apos;, component: A, alias: &apos;/b&apos; }</code></pre><h4 id="router实例的属性和方法"><a href="#router实例的属性和方法" class="headerlink" title="router实例的属性和方法"></a>router实例的属性和方法</h4><ul><li>属性</li></ul><p>router.app: 配置了 router 的 Vue 根实例。<br>router.mode: 路由使用的 模式。<br>router.currentRoute: 当前路由对应的 路由信息对象.</p><ul><li>方法</li></ul><p>router.beforeEach(guard)<br>router.afterEach(hook)</p><p>增加全局的导航钩子。参考 导航钩子.</p><p>router.push(location)<br>router.replace(location)<br>router.go(n)：这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。<br>router.back()<br>router.forward()</p><p>动态的导航到一个新 url。参考 编程式导航.</p><ul><li>router.getMatchedComponents()</li></ul><p>返回当前路由匹配的组件数组（是数组的定义/构造类，不是实例）。通常在服务端渲染的数据预加载时时候。</p><h4 id="导航钩子"><a href="#导航钩子" class="headerlink" title="导航钩子"></a>导航钩子</h4><p>正如其名，vue-router 提供的导航钩子主要用来拦截导航，让它完成跳转或取消。有多种方式可以在路由导航发生时执行钩子：全局的, 单个路由独享的, 或者组件级的。</p><ul><li>全局钩子</li></ul><p>可以使用 router.beforeEach 注册一个全局的 before 钩子：</p><pre><code>const router = new VueRouter({ ... })router.beforeEach((to, from, next) =&gt; {      // ...})</code></pre><p>当一个导航触发时，全局的 before 钩子按照创建顺序调用。钩子是异步解析执行，此时导航在所有钩子 resolve 完之前一直处于 等待中。</p><h2 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h2><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><h2 id="路由信息对象"><a href="#路由信息对象" class="headerlink" title="路由信息对象"></a>路由信息对象</h2>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装：&quot;&gt;&lt;a href=&quot;#安装：&quot; class=&quot;headerlink&quot; title=&quot;安装：&quot;&gt;&lt;/a&gt;安装：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;npm install vue-router --save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;vue路由主要就是通过使用 router-link(默认会被渲染成一个 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 标签) 组件来导航，通过传入 &lt;code&gt;to&lt;/code&gt; 属性指定链接, 最后渲染在&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;中，实现SPA。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
    &amp;lt;router-link to=&amp;quot;/foo&amp;quot;&amp;gt;Go to Foo&amp;lt;/router-link&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://peggy3399.github.io/tags/vue/"/>
    
      <category term="路由" scheme="https://peggy3399.github.io/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>vue-advanced</title>
    <link href="https://peggy3399.github.io/2017/12/28/vue-advanced/"/>
    <id>https://peggy3399.github.io/2017/12/28/vue-advanced/</id>
    <published>2017-12-28T07:46:57.000Z</published>
    <updated>2017-12-28T08:36:03.665Z</updated>
    
    <content type="html"><![CDATA[<p>Vue提供多种不同的过渡效果 。</p><ul><li>在 CSS 过渡和动画中自动应用 class</li><li>可以配合使用第三方 CSS 动画库，如 Animate.css</li><li>在过渡钩子函数中使用 JavaScript 直接操作 DOM</li><li>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</li></ul><a id="more"></a><h4 id="1-安装："><a href="#1-安装：" class="headerlink" title="1. 安装："></a>1. 安装：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-transition</span><br></pre></td></tr></table></figure><h4 id="2-CSS过渡"><a href="#2-CSS过渡" class="headerlink" title="2. CSS过渡"></a>2. CSS过渡</h4><h5 id="2-1-单元素-组件的过渡"><a href="#2-1-单元素-组件的过渡" class="headerlink" title="2.1 单元素/组件的过渡"></a>2.1 单元素/组件的过渡</h5><p>Vue 提供了 transition 的封装组件，所以我们在一下情景中都可以使用过渡。</p><ul><li>条件渲染 （使用 v-if）</li><li>条件展示 （使用 v-show）</li><li>动态组件</li><li>组件根节点</li></ul><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;show = !show&quot;&gt;</span><br><span class="line">    Toggle</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  &lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#demo&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.fade-enter-active, .fade-leave-active &#123;</span><br><span class="line">  transition: opacity .5s</span><br><span class="line">&#125;</span><br><span class="line">.fade-enter, .fade-leave-active &#123;</span><br><span class="line">  opacity: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="2-2-过渡的CSS-类名"><a href="#2-2-过渡的CSS-类名" class="headerlink" title="2.2 过渡的CSS-类名"></a>2.2 过渡的CSS-类名</h5><p>会有 4 个(CSS)类名在 enter/leave 的过渡中切换：</p><ul><li>v-enter: 定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。</li><li>v-enter-active: 定义进入过渡的结束状态。在元素被插入时生效，在 transition/animation 完成之后移除。</li><li>v-leave: 定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。</li><li>v-leave-active: 定义离开过渡的结束状态。在离开过渡被触发时生效，在 transition/animation 完成之后移除。</li></ul><h4 id="3-CSS动画"><a href="#3-CSS动画" class="headerlink" title="3. CSS动画"></a>3. CSS动画</h4><p>CSS动画是在animationend 事件触发时删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;show = !show&quot;&gt;Toggle show&lt;/button&gt;</span><br><span class="line">  &lt;transition name=&quot;bounce&quot;&gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;Look at me!&lt;/p&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#example-2&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.bounce-enter-active &#123;</span><br><span class="line">  animation: bounce-in .5s;</span><br><span class="line">&#125;</span><br><span class="line">.bounce-leave-active &#123;</span><br><span class="line">  animation: bounce-out .5s;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes bounce-in &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: scale(0);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    transform: scale(1.5);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes bounce-out &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    transform: scale(1.5);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: scale(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue提供多种不同的过渡效果 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 CSS 过渡和动画中自动应用 class&lt;/li&gt;
&lt;li&gt;可以配合使用第三方 CSS 动画库，如 Animate.css&lt;/li&gt;
&lt;li&gt;在过渡钩子函数中使用 JavaScript 直接操作 DOM&lt;/li&gt;
&lt;li&gt;可以配合使用第三方 JavaScript 动画库，如 Velocity.js&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://peggy3399.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-basic</title>
    <link href="https://peggy3399.github.io/2017/12/28/vue-basic/"/>
    <id>https://peggy3399.github.io/2017/12/28/vue-basic/</id>
    <published>2017-12-28T07:44:49.000Z</published>
    <updated>2017-12-28T08:33:15.736Z</updated>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><a href="https://vuefe.cn" target="_blank" rel="external">Vue.js</a> 是一个提供 MVVM(Model View ViewModel) 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。ViewModel负责连接 View 和 Model，保证视图和数据的一致，这种轻量级的架构让前端开发更加高效、便捷。</p><blockquote><p>vue.js特点就是（1） 简洁 （2） 轻量 （3）快速 （4） 数据驱动 （5）双向绑定（6） 模块友好 （7） 组件化。</p></blockquote><a id="more"></a><h4 id="1-搭建一个webpack-vue项目"><a href="#1-搭建一个webpack-vue项目" class="headerlink" title="1. 搭建一个webpack + vue项目"></a>1. 搭建一个webpack + vue项目</h4><ul><li>npm install -g vue-cli  ==&gt;快速生成项目模版的工具</li><li>vue init webpack my-project ==&gt;基于webpack的项目</li><li>cd my-project</li><li>npm install 安装需要的依赖</li><li>npm run dev</li></ul><h4 id="2-构造器"><a href="#2-构造器" class="headerlink" title="2. 构造器"></a>2. 构造器</h4><p>创建vue实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  // 选项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-基本用法"><a href="#3-基本用法" class="headerlink" title="3. 基本用法"></a>3. 基本用法</h4><h6 id="3-1-文本"><a href="#3-1-文本" class="headerlink" title="3.1 文本"></a>3.1 文本</h6><p>  数据绑定最基础的形式是文本插值，使用 “Mustache” 语法（双大括号）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>  只执行一次插值v-once：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-once&gt;This will never change: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h5 id="3-2-原始HTML"><a href="#3-2-原始HTML" class="headerlink" title="3.2 原始HTML"></a>3.2 原始HTML</h5><p>  双大括号会将数据解释为纯文本，如果要输出真正的 HTML ，就需要使用 v-html 指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-html=&quot;rawHtml&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h5 id="3-3-指令和属性"><a href="#3-3-指令和属性" class="headerlink" title="3.3 指令和属性"></a>3.3 指令和属性</h5><p>  指令 (Directives) 是特殊的带有前缀 v- 的特性。指令的值限定为绑定表达式，指令的职责就是当其表达式的值改变时把某些特殊的行为应用到 DOM 上。<br>  有些指令可以在其名称后面带一个“参数” (Argument)，中间放一个冒号隔开。</p><ul><li>v-bind 指令用于绑定html特性：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;</span><br></pre></td></tr></table></figure><p>由此绑定class有两种写法：<br>v-bind:class和class=”“，但是不推荐混合使用。两者只能选其一！</p><ul><li>v-on 指令，它用于监听 DOM 事件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;</span><br></pre></td></tr></table></figure><ul><li>便捷的修饰符（事件处理器详细说明）。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- v-on 指令触发事件时调用 event.preventDefault() --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只在按下回车键的时候触发事件 --&gt;</span><br><span class="line">&lt;input \@keyup.enter=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure><h5 id="3-4-计算属性"><a href="#3-4-计算属性" class="headerlink" title="3.4 计算属性"></a>3.4 计算属性</h5><pre><code>var vm = new Vue({  el: &apos;#demo&apos;,  data: {    firstName: &apos;Foo&apos;,    lastName: &apos;Bar&apos;  },  computed: {    fullName: function () {      return this.firstName + &apos; &apos; + this.lastName    }  }})//Foo Bar</code></pre><p>  计算属性默认只是 getter，不过在需要时你也可以提供一个 setter</p><h5 id="3-5-条件渲染"><a href="#3-5-条件渲染" class="headerlink" title="3.5 条件渲染"></a>3.5 条件渲染</h5><ul><li>v-if</li></ul><p>v-if 是一个指令，需要将它添加到一个元素上。如果想要切换多个元素，此时可以把一个 <code>&lt;template&gt;</code> 元素当做包装元素，并在上面使用 v-if，最终的渲染结果不会包含它。通过控制dom结构的添加与删除控制显示和隐藏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-if=&quot;ok&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Title&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;Paragraph 1&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Paragraph 2&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>v-show</p><p>v-show的元素会始终渲染并保持在 DOM 中。v-show 是简单的切换元素的 CSS 属性 display。<br>注意 v-show 不支持 <code>&lt;template&gt;</code> 语法。</p><p>v-show 用在组件上时，因为指令的优先级 v-else 会出现问题。另一个 v-show 替换 v-else。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-component v-show=&quot;condition&quot;&gt;&lt;/custom-component&gt;</span><br><span class="line">&lt;p v-show=&quot;!condition&quot;&gt;这可能也是一个组件&lt;/p&gt;</span><br></pre></td></tr></table></figure><ul><li>v-else</li></ul><p>元素必须立即跟在 v-if 或 v-show 元素的后面——否则它不能被识别。</p><h5 id="3-6-列表渲染"><a href="#3-6-列表渲染" class="headerlink" title="3.6 列表渲染"></a>3.6 列表渲染</h5><p>v-for 指令基于一个数组渲染一个列表。形式为 item in items，items 是数据数组，item 是当前数组元素的别名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;example-1&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">      &#123;&#123; item.message &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">var example1 = new Vue(&#123;</span><br><span class="line">  el: &apos;#example-1&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123;message: &apos;foo&apos; &#125;,</span><br><span class="line">      &#123;message: &apos;Bar&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个只是最基本的用法，v-for还有多种用法，可以看文档的列表循环有详细介绍。</p><h5 id="3-7-事件处理器"><a href="#3-7-事件处理器" class="headerlink" title="3.7 事件处理器"></a>3.7 事件处理器</h5><p>前面提到了监听事件，vue还有</p><ul><li>方法事件处理器(就是添加自定义方法来调用)：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;!-- &apos;greet&apos; 是在methods中定义的方法名 --&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>内联处理器：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-3&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;say(&apos;hi&apos;)&quot;&gt;Say hi&lt;/button&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;say(&apos;what&apos;)&quot;&gt;Say what&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#example-3&apos;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    say: function (message) &#123;</span><br><span class="line">      alert(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  其实看上去只不顾就是传递了参数。</p><h5 id="3-8-修饰符"><a href="#3-8-修饰符" class="headerlink" title="3.8 修饰符"></a>3.8 修饰符</h5><p>修饰符可以分为事件修饰符和按键修饰符,后面表单控件也有修饰符：</p><h6 id="3-8-1-事件修饰符："><a href="#3-8-1-事件修饰符：" class="headerlink" title="3.8.1 事件修饰符："></a>3.8.1 事件修饰符：</h6><ul><li>.stop</li><li>.prevent</li><li>.capture</li><li>.self</li></ul><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 修饰符可以串联  --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 添加事件侦听器时使用时间捕获模式 --&gt;</span><br><span class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class="line">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span><br><span class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h6 id="3-8-2-按键修饰符："><a href="#3-8-2-按键修饰符：" class="headerlink" title="3.8.2 按键修饰符："></a>3.8.2 按键修饰符：</h6><p>全部的按键别名：</p><ul><li>enter </li><li>tab </li><li>delete(捕获 “删除” 和 “退格” 键)  </li><li>esc </li><li>space </li><li>up  </li><li>down  </li><li>left  </li><li>right</li></ul><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span><br><span class="line">&lt;input @keyup.enter=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure></p><h5 id="3-9-表单控件绑定"><a href="#3-9-表单控件绑定" class="headerlink" title="3.9 表单控件绑定"></a>3.9 表单控件绑定</h5><p>可以用 v-model 指令在表单控件元素上创建双向数据绑定。负责监听用户的输入事件以更新数据,根据控件类型它自动选取正确的方法更新元素.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</span><br><span class="line">&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>类似与多个勾选框这种情况的(复选框等)，就需要绑定到同一个数组。(vue1.html)</p><h6 id="3-9-1-表单控件修饰符"><a href="#3-9-1-表单控件修饰符" class="headerlink" title="3.9.1 表单控件修饰符"></a>3.9.1 表单控件修饰符</h6><ul><li>.lazy</li><li>.number 自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值）</li><li>.trim 自动过滤用户输入的首尾空格</li></ul><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot; &gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://vuefe.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue.js&lt;/a&gt; 是一个提供 MVVM(Model View ViewModel) 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。ViewModel负责连接 View 和 Model，保证视图和数据的一致，这种轻量级的架构让前端开发更加高效、便捷。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vue.js特点就是（1） 简洁 （2） 轻量 （3）快速 （4） 数据驱动 （5）双向绑定（6） 模块友好 （7） 组件化。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://peggy3399.github.io/tags/vue/"/>
    
      <category term="basic" scheme="https://peggy3399.github.io/tags/basic/"/>
    
  </entry>
  
  <entry>
    <title>yarn搭建vue脚手架</title>
    <link href="https://peggy3399.github.io/2017/12/28/yarn/"/>
    <id>https://peggy3399.github.io/2017/12/28/yarn/</id>
    <published>2017-12-28T07:43:41.000Z</published>
    <updated>2018-06-12T01:56:15.897Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安装yarn（Windows）"><a href="#安装yarn（Windows）" class="headerlink" title="安装yarn（Windows）"></a>安装<a href="https://yarnpkg.com/zh-Hans/docs/install" target="_blank" rel="external">yarn</a>（Windows）</h5><p>官网有三种安装方式，这里只说最简单的安装程序安装。<br>安装之前需要安装node.js。</p><a id="more"></a><p>运行curl -o- -L <a href="https://yarnpkg.com/install.sh" target="_blank" rel="external">https://yarnpkg.com/install.sh</a> | bash命令即可安装或者点击<a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/49970642/3b8d1478-5db4-11e7-8857-b0f901597104?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20170801%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20170801T091331Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=7a540044b7da221b5fe4195d1610043dda2a39eeb10c89ce893a85d4d2192547&amp;X-Amz-SignedHeaders=host&amp;actor_id=21299272&amp;response-content-disposition=attachment%3B%20filename%3Dyarn-0.27.5.msi&amp;response-content-type=application%2Foctet-stream" target="_blank" rel="external">安装</a></p><blockquote><p>查看版本 yarn –version vue –version</p></blockquote><h4 id="简单形式"><a href="#简单形式" class="headerlink" title="简单形式"></a><a href="https://mp.weixin.qq.com/s?__biz=MzA5NTM2MTEzNw%3D%3D&amp;idx=1&amp;mid=2736710892&amp;sn=8a086429d6f91b7248a7f327d33c20ce" target="_blank" rel="external">简单形式</a></h4><ul><li>yarn add global vue-cli</li><li>yarn vue</li><li>vue init webpack-simple my-project</li><li>cd my-project</li><li>yarn</li><li>yarn run dev</li></ul><h4 id="复杂形式"><a href="#复杂形式" class="headerlink" title="复杂形式"></a>复杂形式</h4><ul><li>yarn add global vue-cli</li><li>vue init webpack my-project</li><li>cd my-project</li><li>yarn</li><li>yarn run dev</li></ul><blockquote><p>打开你的浏览器连到<a href="http://localhost:8080/就可以看到运行的界面。" target="_blank" rel="external">http://localhost:8080/就可以看到运行的界面。</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;安装yarn（Windows）&quot;&gt;&lt;a href=&quot;#安装yarn（Windows）&quot; class=&quot;headerlink&quot; title=&quot;安装yarn（Windows）&quot;&gt;&lt;/a&gt;安装&lt;a href=&quot;https://yarnpkg.com/zh-Hans/docs/install&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;yarn&lt;/a&gt;（Windows）&lt;/h5&gt;&lt;p&gt;官网有三种安装方式，这里只说最简单的安装程序安装。&lt;br&gt;安装之前需要安装node.js。&lt;/p&gt;
    
    </summary>
    
    
      <category term="yarn" scheme="https://peggy3399.github.io/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>面朝大海，春暖花开</title>
    <link href="https://peggy3399.github.io/2017/12/28/%E5%8F%AF%E6%83%9C%E4%B8%8D%E6%98%AF%E4%BD%A0/"/>
    <id>https://peggy3399.github.io/2017/12/28/可惜不是你/</id>
    <published>2017-12-28T03:27:59.000Z</published>
    <updated>2018-06-12T02:27:05.927Z</updated>
    
    <content type="html"><![CDATA[<!-- ![](https://github.com/Peggy3399/Peggy3399.github.io/blob/master/images/avatar/timg.png?raw=true) --><p><img src="/img/peggy/timg.jpg" alt=""></p><p>是不是有点怀疑人生，是不是有点迷茫，是不是很累了，来一场心灵的旅程放松一下！！！</p><a id="more"></a><ul><li><p>我以为长大就能解决所有问题，但长大才是问题的开始…</p></li><li><p>人生最遗憾的,莫过于,轻易地放弃了不该放弃的,固执地坚持了不该坚持的…</p></li><li><p>有些时候，正是为了爱才悄悄躲开，躲开的是身影，躲不开的却是那份默默的情怀…</p></li><li><p>有些失去是注定的,有些缘分是永远不会有结果的，爱一个人不一定会拥有,拥有一个人就一定要好好去爱…</p></li><li><p>恋爱，在感情上，当你想征服对方的时候，实际上已经在一定程度上被对方征服了。首先是对方对你的吸引，然后才是你征服对方的欲望…</p></li><li><p>如果爱上，就不要轻易放过机会。莽撞，可能使你后悔一阵子；怯懦，却可能使你后悔一辈子…</p></li><li><p>爱情还没有来到，日子是无忧无虑的；最痛苦的，也不过是测验和考试。当时觉得很大压力，后来回望，不过是多么的微小…</p></li><li><p>曾经相遇，总胜过从未碰头…</p></li><li><p>爱，从来就是一件千回百转的事。不曾被离弃，不曾受伤害，怎懂得爱人？爱，原来是一种经历，但愿人长久…</p></li><li><p>人生的大部份时间里，承诺同义词是束缚，奈何我们向往束缚…</p></li><li><p>我们放下尊严, 放下个性，放下固执，都只是因为放不下一个人…</p></li><li><p>如果，不幸福，如果，不快乐，那就放手吧；如果，舍不得，如果，放不下，那就痛苦吧…</p></li><li><p>人的一生就像在拉屎，有时你已经很努力了，可出来的是一个屁…</p></li><li><p>“什么叫乐观派的人？”“这个……就像茶壶一样，屁股都烧的红红的，它还有心情吹口哨。”…</p></li><li><p>如果有一天，不再喜欢你了，我的生活会不会又像从前那样孤单、颓废……我不想再要那样的生活，所以，在我还没有放弃你之前，请你,至少要先喜欢上我…</p></li><li><p>“以后你的头归我管，你要是敢蹂躏它，我就跟你没完。” “那还有什么是我自己的吗？” “很抱歉，似乎除了我你一无所有。”…</p></li><li><p>承诺本来就是男人与女人的一场角力，有时皆大欢喜，大部份的情况却两败俱伤…</p></li><li><p>只想找一个在我失意时可以承受我的眼泪，在我快乐时，可以让我咬一口的肩膊…</p></li><li><p>好的爱情是你透过一个男人看到世界，坏的爱情是你为了一个人舍弃世界。总以为自己才是付出的那个，其实，他为我放弃的更多…</p></li><li><p>当深爱的人与最好的朋友都在你身边时，这大约就是人生最快乐的事了…</p></li><li><p>原来的我们，都敢理直气壮地说一辈子…</p></li><li><p>因为承诺，所以我们愿意等…</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;!-- ![](https://github.com/Peggy3399/Peggy3399.github.io/blob/master/images/avatar/timg.png?raw=true) --&gt;
&lt;p&gt;&lt;img src=&quot;/img/peggy/timg.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;是不是有点怀疑人生，是不是有点迷茫，是不是很累了，来一场心灵的旅程放松一下！！！&lt;/p&gt;
    
    </summary>
    
    
      <category term="语录" scheme="https://peggy3399.github.io/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Angular2-basic</title>
    <link href="https://peggy3399.github.io/2017/11/14/angular2-basic/"/>
    <id>https://peggy3399.github.io/2017/11/14/angular2-basic/</id>
    <published>2017-11-14T03:47:32.000Z</published>
    <updated>2017-12-28T06:21:48.726Z</updated>
    
    <content type="html"><![CDATA[<h4 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h4><p>Angular2 指令是构成Angular2应用程序的重要组成部分，指令主要用来对模板的标签或者元素附加一些新的特性或者功能，改变一个 DOM 元素的外观或行为，主要存在两种类型的指令：</p><ul><li>结构型指令：会通过添加 / 删除 DOM 元素来更改 DOM 树布局</li><li>属性型指令：指令改变一个元素的外观或行为。</li></ul><a id="more"></a><h5 id="NgStyle"><a href="#NgStyle" class="headerlink" title="NgStyle"></a>NgStyle</h5><p>NgStyle 指令，可以通过angular表达式为DOM元素设置一个CSS属性。NgStyle真正厉害之处是可以使用动态值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;color&quot; #colorinput&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;fontSize&quot; #fontinput&gt;</span><br><span class="line">    &lt;button (click)=&quot;apply(colorinput.value, fontinput.value)&quot;&gt; apply &lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span [ngStyle]=&quot;&#123;color: colorinput.value, &apos;background-color&apos;: &apos;blue&apos;&#125;&quot; [style.font-size.px]=&quot;fontSize&quot;&gt;color :&#123;&#123; colorinput.value &#125;&#125; font: &#123;&#123;fontinput.value&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;p [ngStyle]=&quot;style()&quot;&gt;hello hello hello&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="NgIf"><a href="#NgIf" class="headerlink" title="NgIf"></a>NgIf</h5><p>ngIf指令是用于当你想要通过某个条件显示或者隐藏一个元素时，条件是由你传递给该指令的表达式结果来确定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngIf=&quot;false&quot;&gt;&lt;/div&gt; &lt;!-- never displayed --&gt;</span><br><span class="line">&lt;div *ngIf=&quot;a &gt; b&quot;&gt;&lt;/div&gt; &lt;!-- displayed if a is more than b --&gt;</span><br><span class="line">&lt;div *ngIf=&quot;str === &apos;yes&apos;&quot;&gt;&lt;/div&gt; &lt;!-- displayed if str holds the string &quot;yes&quot; --&gt;</span><br><span class="line">&lt;div *ngIf=&quot;myFunc()&quot;&gt;&lt;/div&gt; &lt;!-- displayed if myFunc returns a true value --&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Angular2 没有提供内置的ng-show，如果你的目标只是改变一个元素的css，你可以考虑使用ngStyle或class指令。只是用[hidden]属性，没有[show]属性。</p></blockquote><h5 id="NgClass"><a href="#NgClass" class="headerlink" title="NgClass"></a>NgClass</h5><p>NgClass指令，在你的HTML模板通过ngClass属性表示，允许您为一个给定的DOM元素动态地设置和改变CSS类。</p><ul><li>使用方式是通过对象字符串，对象用key作为类名称，value应该是一个true/false值，以指示该类是否应该应用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [ngClass]=&quot;&#123;bordered: false&#125;&quot;&gt;This is never bordered&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>在组件中声明一个数组变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.classList = [&apos;blue&apos;, &apos;round&apos;];</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;base&quot; [ngClass]=&quot;classList&quot;&gt;</span><br><span class="line">  This is &#123;&#123; classList.indexOf(&apos;blue&apos;) &gt; -1 ? &quot;&quot; : &quot;NOT&quot; &#125;&#125; blue and &#123;&#123; classList.indexOf(&apos;round&apos;) &gt; -1 ? &quot;&quot; : &quot;NOT&quot; &#125;&#125; round</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>通过对象数组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [ngClass]=&quot;&#123;true:&apos;change1&apos;,false:&apos;change2&apos;&#125;[className]&quot;&gt;This is Angular1&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div [class.change1]=&quot;className&quot;&gt;This is Angular2&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>通过key/value</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [ngClass]=&quot;&#123;&apos;change1&apos;:select1,&apos;change2&apos;:select2,&apos;change3&apos;:select3&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div [ngClass]=&quot;&#123;&apos;change1&apos;:(className == &apos;select1&apos;)&#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="ngSwitch"><a href="#ngSwitch" class="headerlink" title="ngSwitch"></a>ngSwitch</h5><p>NgSwitch指令可以应用在任何HTML元素上，它评估元素的ngSwitch属性值，并根据这个值 决定应用哪些template的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul [ngSwitch]=&quot;choice&quot;&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;1&quot;&gt;First choice&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;2&quot;&gt;Second choice&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;3&quot;&gt;Third choice&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;4&quot;&gt;Fourth choice&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;2&quot;&gt;Second choice, again&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchDefault&gt;Default choice&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可以同时显示多个分支例如,在上面的示例中choice是2时,第二和第五li将渲染</p></blockquote><h5 id="NgNonBindable"><a href="#NgNonBindable" class="headerlink" title="NgNonBindable"></a>NgNonBindable</h5><p>比方说，我们要渲染在我们模板中的纯字符串。通常，该文本将因为我们使用的模板语法绑定到content变量的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;bordered&quot;&gt;&#123;&#123; content &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;pre&quot; ngNonBindable&gt;</span><br><span class="line">    &amp;lt;-- This is what &#123;&#123; content &#125;&#125; rendered &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="NgTemplateOutlet"><a href="#NgTemplateOutlet" class="headerlink" title="NgTemplateOutlet"></a>NgTemplateOutlet</h5><p>我们可以建立一个模板,使用这个模板,通过在不同的上下文可重用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template  #foo let-name=&quot;name&quot; let-skills=&quot;skills&quot;&gt;</span><br><span class="line">    &lt;h4&gt;&#123;&#123;name&#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li *ngFor=&quot;let s of skills&quot;&gt;&#123;&#123;s&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;div [ngTemplateOutlet]=&quot;foo&quot; [ngOutletContext]=&quot;msg1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;h1 style=&quot;background: yellow;&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;div [ngTemplateOutlet]=&quot;foo&quot; [ngOutletContext]=&quot;msg2&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><h5 id="属性型指令"><a href="#属性型指令" class="headerlink" title="属性型指令"></a>属性型指令</h5><ul><li><a href="http://blog.csdn.net/shenlei19911210/article/details/53218074" target="_blank" rel="external">Directive</a> 提供@Directive装饰器功能。</li><li>ElementRef：是一个服务，注入到指令构造函数中，这样代码可以访问 DOM 元素。</li><li>Input：将数据从绑定表达式传达到指令中。</li><li>Renderer：写在构造函数中，让代码可以改变 DOM 元素的属性等（setElementAttribute，setElementStyle，setElementClass等）。</li><li>host：添加监听事件。</li></ul><p>@Directive装饰器需要一个 CSS 选择器(属性名称加方括号-[attr])，以便从模板中识别出关联到这个指令的 HTML。<br>指令的选择器是[myHighlight]，Angular将会在模板中找到所有带myHighlight属性的元素。</p><blockquote><p>一定要记住在 @NgModule 的 declarations 数组中显示的声明我们定义的指令。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Directive, ElementRef, Renderer, HostListener, Input &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">    selector: &apos;[prefixHightlight]&apos;,</span><br><span class="line">    host: &#123;</span><br><span class="line">        &apos;(click)&apos;: &apos;onclick()&apos;,</span><br><span class="line">        &apos;(mouseleave)&apos;: &apos;onMouseLeave()&apos;,</span><br><span class="line">        &apos;(mouseenter)&apos;: &apos;onMouseEnter()&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用数据绑定向指令传递值,在定义这个属性的时候，我们调用了@Input()装饰器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Input(&apos;prefixHightlight&apos;) highlightColor: string;</span><br></pre></td></tr></table></figure><p>添加监听事件另一种就是通过 @HostListener，直接操纵 DOM 元素的方式给宿主 DOM 元素附加一个事件监听器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@HostListener(&apos;mouseenter&apos;)</span><br><span class="line">onMouseEnter() &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="结构型指令"><a href="#结构型指令" class="headerlink" title="结构型指令"></a>结构型指令</h5><p><a href="http://blog.csdn.net/u010130282/article/details/53613297" target="_blank" rel="external">结构型指令</a>需要在构造方法注入TemplateRef和ViewContainerRef这两个服务，TemplateRef用于访问组件模板，ViewContainerRef是渲染器，用于往DOM插入或移除模板等。</p><blockquote><p>注意属性型和结构型子在dom元素中的写法</p></blockquote><h4 id="NgZone"><a href="#NgZone" class="headerlink" title="NgZone"></a>NgZone</h4><p>Angular应用程序通过组件实例和模板之间进行数据交互，也就是将组件的数据和页面DOM元素关连起来，当数据有变化后，NG2能够监测到这些变化并更新视图，反之亦然，它的数据流向是单项的，通过属性绑定和事件绑定来实现数据的流入和流出，数据从属性绑定流入组件，从事件流出组件，数据的双向绑定就是通过这样来实现的。</p><h5 id="进行变化监测的情形"><a href="#进行变化监测的情形" class="headerlink" title="进行变化监测的情形"></a>进行变化监测的情形</h5><p>angular需要去更新视图的情形： </p><ul><li>event：在view中绑定事件来监听用户的操作，如果数据有变更则更新视图；</li><li>xmlHTTPRequest/webSocket：例如从远端服务拉取对应的数据，这是一个异步的过程；</li><li>timeout：例如：setTimeout, setInterval, requestAnimationFrame都是在某个延时后触发。</li></ul><p>(requestAnimationFrame)[<a href="http://www.zhangxinxu.com/wordpress/tag/requestanimationframe/" target="_blank" rel="external">http://www.zhangxinxu.com/wordpress/tag/requestanimationframe/</a>]</p><p>这些都是异步的处理，即需要使用异步回调函数，结论就是，不管任何时候的一个异步操作，我们应用程序状态可能已经被改变，这就需要告诉Angular去更新视图。</p><p><a href="http://www.cnblogs.com/czaiz/p/6530820.html" target="_blank" rel="external">关于zone</a>：简单的可以概述成zone是一个异步事件拦截器，也就是说zone能够hook到异步任务的执行上下文，以此来处理一些操作，比如说，在我们每次启动或者完成一个异步的操作、进行堆栈的跟踪处理、某段功能代码进入或者离开zone，我们可以在这些关键的节点重写我们所需处理的方法。</p><p>实际上，ngZone是基于<a href="http://www.cnblogs.com/whitewolf/p/zone-js.html" target="_blank" rel="external">zone.js</a>来实现的，Angular2 fork了zone.js，它是zone派生出来的一个子zone，在Angular环境内注册的异步事件都运行在这个子zone上(因为ngZone拥有整个Angular运行环境的执行上下文)。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;内置指令&quot;&gt;&lt;a href=&quot;#内置指令&quot; class=&quot;headerlink&quot; title=&quot;内置指令&quot;&gt;&lt;/a&gt;内置指令&lt;/h4&gt;&lt;p&gt;Angular2 指令是构成Angular2应用程序的重要组成部分，指令主要用来对模板的标签或者元素附加一些新的特性或者功能，改变一个 DOM 元素的外观或行为，主要存在两种类型的指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构型指令：会通过添加 / 删除 DOM 元素来更改 DOM 树布局&lt;/li&gt;
&lt;li&gt;属性型指令：指令改变一个元素的外观或行为。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="angular" scheme="https://peggy3399.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular2路由</title>
    <link href="https://peggy3399.github.io/2017/11/14/angular2-routes/"/>
    <id>https://peggy3399.github.io/2017/11/14/angular2-routes/</id>
    <published>2017-11-14T03:45:21.000Z</published>
    <updated>2017-12-28T06:21:27.655Z</updated>
    
    <content type="html"><![CDATA[<h4 id="路由概述"><a href="#路由概述" class="headerlink" title="路由概述"></a>路由概述</h4><p>  大多数带路由的应用都要在 index.html 的 <head> 标签下先添加一个 <base> 元素，来告诉路由器该如何合成导航用的 URL 。</head></p><p>  Angular2包含了一个路由框架，我们只需要定义一个个的路径、和它对应的组件，然后在页面跳转时也使用Angular2的方式，我们就能够很方便的实现路由控制。</p><a id="more"></a><p>  Angular2的路由主要包括下面4个部分：</p><ul><li>路由定义：通俗来说定义的就是一个URL路径，打开的是哪个页面，由哪个控制器来控制数据交互和用户交互。在Angular2中，这个控制器就是组件(Component)，页面就是在组件定义中定义的这个组件对应的模板页面。</li><li>路由器：也就是分发器。它是由Angular2的框架实现。当我们点击一个链接时，就是由它来确定要打开哪一个组件，怎么封装和传递参数等。</li><li>导航：也就是从一个页面打开另一个页面。一般有两种方式，一种是通过页面上的一个链接link，另一种是在js里面使用代码导航。 </li><li>参数：当我们在页面之间跳转时，通常都需要传递参数。除了常用的通过url参数来传递以外，在REST风格的路径设计中，我们经常需要使用某一个id来作为url的一部分，也就是说把参数放在url里面</li></ul><h4 id="路由定义"><a href="#路由定义" class="headerlink" title="路由定义"></a>路由定义</h4><p>  我们需要定义我们的路由，也就是路径-组件的对应关系。通常我们会创建一个单独的文件 app.routes.ts，基本的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import&#123; Routes &#125;from&apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">export const routes: Routes = [ </span><br><span class="line">  &#123; path: &apos;&apos;, redirectTo: &apos;/todost&apos;, pathMatch: &apos;full&apos; &#125;, </span><br><span class="line">  &#123; path: &apos;todost&apos;, component: TodoListComponent &#125;, </span><br><span class="line">  &#123; path: &apos;todo/detail/:id&apos;, component: TodoDetailComponent &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>  需要在app.module.ts中引入路由模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; RouterModule &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">imports: [</span><br><span class="line">  RouterModule.forRoot(routes)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>如果我们要定义子模块和子模块路由，就需要使用 AppRoutingModule的方式。在你的开发中，也建议使用路由模块的定义方式。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; RouterModule, Routes &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">const routes: Routes = [&#123;</span><br><span class="line">    path: &apos;&apos;,</span><br><span class="line">    redirectTo: &apos;/todo/list&apos;,</span><br><span class="line">    pathMatch: &apos;full&apos;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;todo/list&apos;,</span><br><span class="line">    component: TodoListComponent</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;todo/detail/:id&apos;,</span><br><span class="line">    component: TodoDetailComponent</span><br><span class="line">&#125;];</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [RouterModule.forRoot(routes)],</span><br><span class="line">    exports: [RouterModule]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   Routes其实就是一个路由列表类型 Route[],而 Route是Angular路由框架定义的一个接口。最基本的路由包括2个属性: path和 component,分别是这个路由对应的URL路径，和这个路径对应的组件。</p><p>   上面使用 redirectTo: ‘/todo/list’，重定向到任务列表。当我们使用 redirectTo重定向时，需要 pathMatch来指定匹配方式，也就是如何匹配上面的 ‘’。我们可以完全匹配 full,也可以匹配前缀 prefix。</p><h4 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h4><h5 id="设置载入点"><a href="#设置载入点" class="headerlink" title="设置载入点"></a>设置载入点</h5><p>  载入点，就是来告诉Angular我们的这个路由对应组件的页面，要载入到页面上哪一个地方，这个就是 RouterOutlet。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-outlet&gt;&lt;/router-outlet&gt;</span><br></pre></td></tr></table></figure><h5 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h5><h5 id="使用链接导航"><a href="#使用链接导航" class="headerlink" title="使用链接导航"></a>使用链接导航</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a routerLink=&quot;/todo/list&quot; routerLinkActive=&quot;active&quot;&gt;这是一个链接&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>  outerLink=”/todo/list” 就是链接的定义方式，后面的 routerLinkActive=”active” 表示如果当前的路由处于被激活的状态时，在这个链接的a元素上，就添加一个 active的css类。</p><h5 id="代码中导航"><a href="#代码中导航" class="headerlink" title="代码中导航"></a>代码中导航</h5><p>  有时候，我们需要在代码中根据具体情况跳转到不同的页面，我们可以通过Angular2提供的路由器 Router来实现。</p><p>  如果我们要在某一个组件中实现跳转，我们需要在这个组件的构造方法中注入 Router，然后在需要的时候调用它的 <a href="http://blog.csdn.net/erciyuan_nuonuo/article/details/54604311" target="_blank" rel="external">navigate</a>(newUrl)方法。todoitem.component.ts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Router &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">export class TodoItemComponent &#123;</span><br><span class="line">    constructor(private router: Router) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    gotoDetail(todo: any) &#123;</span><br><span class="line">        this.router.navigate([&apos;/todo/detail&apos;, todo.id]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h5><p>  如果只是在使用路由的时候传递参数的话，有2种方式：</p><ul><li>路径方式：参数作为路径的一部分，例如 /todo/detail/12，其中的’12’就是参数，代表任务Id。 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/todo/detail&apos;, 12]&quot; routerLinkActive=&quot;active&quot;&gt;</span><br></pre></td></tr></table></figure><p>  在这里，我们使用 [routerLink]的方式进行数据的绑定，绑定的值，就是 [‘/todo/detail’, item.id]，他是一个表达式，Angular会把这个列表中的2个数据解析后拼接在一起，生成’/todo/detail/12’的链接。如果我们的连接格式是’/todo/12/detail’，那就是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/todo&apos;, item.id, &apos;detail&apos;]&quot; routerLinkActive=&quot;active&quot;&gt;</span><br></pre></td></tr></table></figure><p>  代码中参数导航：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onSelect(item: Item) &#123;</span><br><span class="line">  this.router.navigate( [&apos;/todo/detail&apos;, item.id] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>参数方式：这种方式是把参数放在URL的参数里，例如 /todo/detail/12?id=12&amp;type=important。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/todo/detail&apos;]&quot; [queryParams]=&quot;&#123;id: item.id, type: &apos;important&apos;&#125;&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>  代码中参数导航：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onSelect(item: Item) &#123;</span><br><span class="line">  this.router.navigate( [&apos;/todo/detail&apos;, this.selectedTodo.id], &#123; queryParams: &#123; id: this.selectedTodo.id, type:&apos;important&apos;&#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h4><p>  在需要加载的组件下写children，写法与路由的写法一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; RouterModule, Routes &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">const appChildRoutes: Routes = [</span><br><span class="line">    &#123;path: &apos;&apos;, redirectTo: &quot;one&quot; &#125;,</span><br><span class="line">    &#123;path: &quot;one&quot;, component: TodoListComponent&#125;,</span><br><span class="line">    &#123;path: &quot;two&quot;, component: TodoList2Component&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const routes: Routes = [&#123;</span><br><span class="line">    path: &apos;&apos;,</span><br><span class="line">    redirectTo: &apos;/todo/list&apos;,</span><br><span class="line">    pathMatch: &apos;full&apos;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;todo/list&apos;,</span><br><span class="line">    component: TodoListComponent</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;todo/detail/:id&apos;,</span><br><span class="line">    component: TodoDetailComponent,</span><br><span class="line">    children: appChildRoutes</span><br><span class="line">&#125;];</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [RouterModule.forRoot(routes)],</span><br><span class="line">    exports: [RouterModule]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;路由概述&quot;&gt;&lt;a href=&quot;#路由概述&quot; class=&quot;headerlink&quot; title=&quot;路由概述&quot;&gt;&lt;/a&gt;路由概述&lt;/h4&gt;&lt;p&gt;  大多数带路由的应用都要在 index.html 的 &lt;head&gt; 标签下先添加一个 &lt;base&gt; 元素，来告诉路由器该如何合成导航用的 URL 。&lt;/head&gt;&lt;/p&gt;
&lt;p&gt;  Angular2包含了一个路由框架，我们只需要定义一个个的路径、和它对应的组件，然后在页面跳转时也使用Angular2的方式，我们就能够很方便的实现路由控制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="angular" scheme="https://peggy3399.github.io/tags/angular/"/>
    
      <category term="路由" scheme="https://peggy3399.github.io/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>sass语法</title>
    <link href="https://peggy3399.github.io/2017/11/13/sass%E8%AF%AD%E6%B3%95/"/>
    <id>https://peggy3399.github.io/2017/11/13/sass语法/</id>
    <published>2017-11-13T08:27:56.000Z</published>
    <updated>2017-11-13T09:55:14.926Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h4><p> <a href="http://www.w3cplus.com/sassguide/syntax.html" target="_blank" rel="external">sass</a>的导入(@import)规则和CSS的有所不同，编译时会将@import的scss文件合并进来只生成一个CSS文件。但是如果你在sass文件中导入css文件如@import ‘reset.css’，那效果跟普通CSS导入样式文件一样， 文件中，而是以@import方式存在。<br> 所有的sass导入文件都可以忽略后缀名.scss。一般来说基础的文件命名方法以_开头，如_mixin.scss。这种文件在导入的时候可以不写下划线，可写成@import “mixin”。</p><a id="more"></a><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul><li>// ….. 单行注释不会输入到CSS中</li><li>/<em> ….. </em>/ 标准注释会编译到css中</li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>sass的变量必须是$开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(:)分隔开（就像CSS属性设置一样），如果值后面加上!default则表示默认值。</p><ol><li>普通变量： 声明后全局范围内可以使用</li><li>默认变量： 默认变量之后加上!default<blockquote><p>默认变量需要被背覆盖时只需要在默认变量之前重新声明变量。例如：</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$baseLineHeight:        2;</span><br><span class="line">$baseLineHeight:        1.5 !default;</span><br><span class="line">body&#123;</span><br><span class="line">    line-height: $baseLineHeight; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">body&#123;</span><br><span class="line">    line-height:2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>特殊变量： 当变量作为属性或者在某些特殊的情况下必须要以#{$variables}形式使用。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$borderDirection:       top !default; </span><br><span class="line">$baseFontSize:          12px !default;</span><br><span class="line">$baseLineHeight:        1.5 !default;</span><br><span class="line"></span><br><span class="line">//应用于class和属性</span><br><span class="line">.border-#&#123;$borderDirection&#125;&#123;</span><br><span class="line">  border-#&#123;$borderDirection&#125;:1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">//应用于复杂的属性值</span><br><span class="line">body&#123;</span><br><span class="line">    font:#&#123;$baseFontSize&#125;/#&#123;$baseLineHeight&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">.border-top&#123;</span><br><span class="line">  border-top:1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">  font: 12px/1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多值变量： 多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象</p></li></ol><ul><li>list： list数据可通过空格，逗号或小括号分隔多个值，可用nth($var,$index)取值。关于list数据操作还有很多其他函数如length($list)，join($list1,$list2,[$separator])，append($list,$value,[$separator])等。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//定义</span><br><span class="line">//一维数据</span><br><span class="line">$px: 5px 10px 20px 30px;</span><br><span class="line"></span><br><span class="line">//二维数据，相当于js中的二维数组</span><br><span class="line">$px: 5px 10px, 20px 30px;</span><br><span class="line">$px: (5px 10px) (20px 30px);</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$linkColor:         #08c #333 !default;//第一个值为默认值，第二个鼠标滑过值</span><br><span class="line">a&#123;</span><br><span class="line">  color:nth($linkColor,1);</span><br><span class="line"></span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">    color:nth($linkColor,2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">a&#123;</span><br><span class="line">  color:#08c;</span><br><span class="line">&#125;</span><br><span class="line">a:hover&#123;</span><br><span class="line">  color:#333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>map： map数据以key和value成对出现，其中value又可以是list。格式为：$map: (key1: value1, key2: value2, key3: value3);。可通过map-get($map,$key)取值。关于map数据还有很多其他函数如map-merge($map1,$map2)，map-keys($map)，map-values($map)等。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//定义</span><br><span class="line">$heading: (h1: 2em, h2: 1.5em, h3: 1.2em);</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);</span><br><span class="line">@each $header, $size in $headings &#123;</span><br><span class="line">  #&#123;$header&#125; &#123;</span><br><span class="line">    font-size: $size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">h1 &#123;</span><br><span class="line">  font-size: 2em; </span><br><span class="line">&#125;</span><br><span class="line">h2 &#123;</span><br><span class="line">  font-size: 1.5em; </span><br><span class="line">&#125;</span><br><span class="line">h3 &#123;</span><br><span class="line">  font-size: 1.2em; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>全局变量： 在变量值后面加上!global即为全局变量。这个目前还用不上，不过将会在sass 3.4后的版本中正式应用。目前的sass变量范围饱受诟病，所以才有了这个全局变量。</li></ol><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><ul><li>选择器嵌套（居多）： 指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性。<br>在选择器嵌套中，可以使用&amp;表示父元素选择器</li><li>属性嵌套：指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">.fakeshadow &#123;</span><br><span class="line">  border: &#123;</span><br><span class="line">    style: solid;</span><br><span class="line">    left: &#123;</span><br><span class="line">      width: 4px;</span><br><span class="line">      color: #888;</span><br><span class="line">    &#125;</span><br><span class="line">    right: &#123;</span><br><span class="line">      width: 2px;</span><br><span class="line">      color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">.fakeshadow &#123;</span><br><span class="line">  border-style: solid;</span><br><span class="line">  border-left-width: 4px;</span><br><span class="line">  border-left-color: #888;</span><br><span class="line">  border-right-width: 2px;</span><br><span class="line">  border-right-color: #ccc; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@at-root：用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//单个选择器跳出</span><br><span class="line">.parent-2 &#123;</span><br><span class="line">  color:#f00;</span><br><span class="line">  @at-root .child &#123;</span><br><span class="line">    width:200px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//多个选择器跳出</span><br><span class="line">.parent-3 &#123;</span><br><span class="line">  background:#f00;</span><br><span class="line">  @at-root &#123;</span><br><span class="line">    .child1 &#123;</span><br><span class="line">      width:300px;</span><br><span class="line">    &#125;</span><br><span class="line">    .child2 &#123;</span><br><span class="line">      width:400px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@at-root与&amp;配合使用</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导入文件&quot;&gt;&lt;a href=&quot;#导入文件&quot; class=&quot;headerlink&quot; title=&quot;导入文件&quot;&gt;&lt;/a&gt;导入文件&lt;/h4&gt;&lt;p&gt; &lt;a href=&quot;http://www.w3cplus.com/sassguide/syntax.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sass&lt;/a&gt;的导入(@import)规则和CSS的有所不同，编译时会将@import的scss文件合并进来只生成一个CSS文件。但是如果你在sass文件中导入css文件如@import ‘reset.css’，那效果跟普通CSS导入样式文件一样， 文件中，而是以@import方式存在。&lt;br&gt; 所有的sass导入文件都可以忽略后缀名.scss。一般来说基础的文件命名方法以_开头，如_mixin.scss。这种文件在导入的时候可以不写下划线，可写成@import “mixin”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="sass" scheme="https://peggy3399.github.io/tags/sass/"/>
    
      <category term="css" scheme="https://peggy3399.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>关闭占用端口</title>
    <link href="https://peggy3399.github.io/2017/11/13/%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3/"/>
    <id>https://peggy3399.github.io/2017/11/13/关闭占用端口/</id>
    <published>2017-11-13T08:27:07.000Z</published>
    <updated>2017-11-13T09:55:20.581Z</updated>
    
    <content type="html"><![CDATA[<p>命令：netstat -ano—–列出所有端口的情况<br>命令：netstat -aon|findstr “49157”——-查看被占用端口对应的PID<br>命令：tasklist|findstr “2720”——查看是哪个进程或者程序占用了2720<br>命令：taskkill /f /t /im Tencentdl.exe——结束该进程<br>      taskkill/pid PID号 /F</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;命令：netstat -ano—–列出所有端口的情况&lt;br&gt;命令：netstat -aon|findstr “49157”——-查看被占用端口对应的PID&lt;br&gt;命令：tasklist|findstr “2720”——查看是哪个进程或者程序占用了2720&lt;br&gt;命令：tas
      
    
    </summary>
    
    
      <category term="命令行" scheme="https://peggy3399.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>git操作</title>
    <link href="https://peggy3399.github.io/2017/11/13/git%E6%93%8D%E4%BD%9C/"/>
    <id>https://peggy3399.github.io/2017/11/13/git操作/</id>
    <published>2017-11-13T07:03:14.000Z</published>
    <updated>2017-11-13T09:54:29.217Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一次提交本地代码到远程分支"><a href="#第一次提交本地代码到远程分支" class="headerlink" title="第一次提交本地代码到远程分支"></a>第一次提交本地代码到远程分支</h4><ul><li>git init</li><li>git remote add origin https://… .git</li><li>git pull origin master –allow-unrelated-histories</li><li>git add .</li><li>git commit -m ‘解释说明文字’</li><li>git push oriign master</li></ul><a id="more"></a><blockquote><p>出现的问题fatal: refusing to merge unrelated histories<br>解决问题：git pull origin master –allow-unrelated-histories</p></blockquote><h4 id="创建本地分支提交到远程"><a href="#创建本地分支提交到远程" class="headerlink" title="创建本地分支提交到远程"></a>创建本地分支提交到远程</h4><ul><li>git branch dev</li><li>git checkout dev</li><li>git add .</li><li>git commit -m ‘解释说明文字’</li><li>git push oriign dev</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一次提交本地代码到远程分支&quot;&gt;&lt;a href=&quot;#第一次提交本地代码到远程分支&quot; class=&quot;headerlink&quot; title=&quot;第一次提交本地代码到远程分支&quot;&gt;&lt;/a&gt;第一次提交本地代码到远程分支&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;git init&lt;/li&gt;
&lt;li&gt;git remote add origin https://… .git&lt;/li&gt;
&lt;li&gt;git pull origin master –allow-unrelated-histories&lt;/li&gt;
&lt;li&gt;git add .&lt;/li&gt;
&lt;li&gt;git commit -m ‘解释说明文字’&lt;/li&gt;
&lt;li&gt;git push oriign master&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://peggy3399.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello Everybody</title>
    <link href="https://peggy3399.github.io/2017/11/13/hello-world/"/>
    <id>https://peggy3399.github.io/2017/11/13/hello-world/</id>
    <published>2017-11-13T06:52:33.315Z</published>
    <updated>2017-11-13T10:29:53.758Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我创建了自己的微博，很开心跟大家分享！</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我创建了自己的微博，很开心跟大家分享！&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hello" scheme="https://peggy3399.github.io/tags/hello/"/>
    
  </entry>
  
</feed>
