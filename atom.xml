<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peegy&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://peggy3399.github.io/"/>
  <updated>2017-12-28T08:24:00.554Z</updated>
  <id>https://peggy3399.github.io/</id>
  
  <author>
    <name>Peggy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack</title>
    <link href="https://peggy3399.github.io/2017/12/28/webpack/"/>
    <id>https://peggy3399.github.io/2017/12/28/webpack/</id>
    <published>2017-12-28T07:50:08.000Z</published>
    <updated>2017-12-28T08:24:00.554Z</updated>
    
    <content type="html"><![CDATA[<p>webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。<br>我们可以直接使用 require(XXX) 的形式来引入各模块，即使它们可能需要经过编译（比如JSX和sass），但我们无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader）在默默处理这些事情，这块我们后续会提到。</p><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><pre><code>$ npm install webpack -g当然如果常规项目还是把依赖写入 package.json 包去更人性化：$ npm init$ npm install webpack --save-dev</code></pre><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>每个项目下都必须配置有一个 webpack.config.js ，它的作用如同常规的 gulpfile.js ，就是一个配置项，告诉 webpack 它需要做什么。示例：</p><pre><code>var webpack = require(&apos;webpack&apos;);var commonsPlugin = new webpack.optimize.CommonsChunkPlugin(&apos;common.js&apos;);module.exports = {    plugins: [commonsPlugin],    entry: {        index : &apos;./src/js/page/index.js&apos;    },    output: {        path: &apos;dist/js/page&apos;,        filename: &apos;[name].js&apos;    },    module: {        loaders: [            { test: /\.css$/, loader: &apos;style-loader!css-loader&apos; },            { test: /\.js$/, loader: &apos;jsx-loader?harmony&apos; },            { test: /\.scss$/, loader: &apos;style!css!sass?sourceMap&apos;},            { test: /\.(png|jpg)$/, loader: &apos;url-loader?limit=8192&apos;}        ]    },    resolve: {        root: &apos;E:/github/flux-example/src&apos;, //绝对路径        extensions: [&apos;&apos;, &apos;.js&apos;, &apos;.json&apos;, &apos;.scss&apos;],        alias: {            AppStore : &apos;js/stores/AppStores.js&apos;,            ActionType : &apos;js/actions/ActionType.js&apos;,            AppAction : &apos;js/actions/AppAction.js&apos;        }    }};</code></pre><ul><li>plugins: 这里定义了需要使用的插件，比如commonsPlugin在打包多个入口文件时会提取出公用的部分，生成common.js</li><li>entry：指定打包的入口文件，每有一个键值对，就是一个入口文件</li><li>output：配置打包结果，path定义了输出的文件夹，filename则定义了打包结果文件的名称，filename里面的[name]会由entry中的键（这里是entry1和entry2）替换</li><li>resolve：定义了解析模块路径时的配置，常用的就是extensions，可以用来指定模块的后缀，这样在引入模块时就不需要写后缀了，会自动补全</li><li>module：定义了对模块的处理逻辑，这里可以用loaders定义了一系列的加载器，以及一些正则。当需要加载的文件匹配test的正则时，就会调用后面的loader对文件进行处理，这正是webpack强大的原因。比如这里定义了凡是.js结尾的文件都是用babel-loader做处理，而.jsx结尾的文件会先经过jsx-loader处理，然后经过babel-loader处理。当然这些loader也需要通过npm install安装</li></ul><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>直接在项目的根目录下运行:</p><pre><code>$ webpack</code></pre><p>也可以添加运行，为了方便出错时能查阅更详尽的信息（比如 webpack 寻找模块的过程），从而更好定位到问题。</p><pre><code>$ webpack --display-error-details</code></pre><p>如果不想要每修改模块一次都打包的话，可以使用webpack-dev-server。它将在 localhost:8080 启动一个 express 静态资源 web 服务器，并且会以监听模式自动运行 webpack。</p><pre><code># 安装$ npm install webpack-dev-server -g# 运行webpack-dev-server --progress --colors</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。&lt;br&gt;我们可以直接使用 require(XXX) 的形式来引入各模块，即使它们可能需要经过编译（比如JSX和sass），但我们无须在上面花费太多心思，因为 webpack 有着各种健全的加载器（loader）在默默处理这些事情，这块我们后续会提到。&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://peggy3399.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue-component</title>
    <link href="https://peggy3399.github.io/2017/12/28/vue-component/"/>
    <id>https://peggy3399.github.io/2017/12/28/vue-component/</id>
    <published>2017-12-28T07:48:31.000Z</published>
    <updated>2017-12-28T08:24:18.690Z</updated>
    
    <content type="html"><![CDATA[<p>Vue的<a href="https://vuefe.cn/guide/components.html" target="_blank" rel="external">组件</a>化功能可谓是它的一大亮点，通过将页面上某一组件的html、CSS、js代码放入一个.vue的文件中进行管理可以大大提高代码的维护性。<br>目前直接使用ES6的模块化功能，再结合Webpack进行相应打包是最热门的方案。</p><a id="more"></a><h4 id="基本写法："><a href="#基本写法：" class="headerlink" title="基本写法："></a>基本写法：</h4><pre><code>// App.vue&lt;template&gt;    &lt;div class=&quot;box&quot; v-text=&quot;note&quot;&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    data () {        return {            note: &apos;这是一个组件的html模板！&apos;        }    }}&lt;/script&gt;&lt;style&gt;.box {    color: #000;}&lt;/style&gt;</code></pre><blockquote><p>data 必须是函数。</p></blockquote><h4 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h4><p>注册全剧组件可以用 Vue.component(tag, constructor) 。</p><pre><code>例如： Vue.component(&apos;my-component&apos;, {          // 选项        })</code></pre><p>组件在注册之后，才可以在父实例的模块中以自定义元素 <code>&lt;my-component&gt;</code> 的形式使用(组件名最好使用小写，并且包含一个短杠)。</p><pre><code>&lt;div id=&quot;example&quot;&gt;  &lt;my-component&gt;&lt;/my-component&gt;&lt;/div&gt;// 注册Vue.component(&apos;my-component&apos;, {  template: &apos;&lt;div&gt;A custom component!&lt;/div&gt;&apos;})// 创建根实例new Vue({  el: &apos;#example&apos;})</code></pre><h4 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h4><p>  用实例选项 components 注册局部组件。局部注册只能在对应的Vue实例下使用，所以它不能在其它Vue实例下使用。</p><pre><code>例如：var Child = {        template: &apos;&lt;div&gt;A custom component!&lt;/div&gt;&apos;      }      new Vue({        // ...        components: {          // &lt;my-component&gt; 将只在父模板可用          &apos;my-component&apos;: Child        }      })</code></pre><h4 id="传递信息"><a href="#传递信息" class="headerlink" title="传递信息"></a>传递信息</h4><p>在 Vue.js 中，父子组件的关系可以总结为 props down, events up 。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息。</p><ul><li>Props</li></ul><p>组件实例的作用域是孤立的。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用 props 把数据传给子组件。</p><pre><code>Vue.component(&apos;child&apos;, {  // 声明 props  props: [&apos;message&apos;],  // 就像 data 一样，prop 可以用在模板内  // 同样也可以在 vm 实例中像 “this.message” 这样使用  template: &apos;&lt;span&gt;{{ message }}&lt;/span&gt;&apos;})</code></pre><p>props也可以用 v-bind 绑定动态 props 到父组件的数据。每当父组件的数据变化时，也会传导给子组件。</p><pre><code>&lt;div&gt;  &lt;input v-model=&quot;parentMsg&quot;&gt;  &lt;br&gt;  &lt;child :my-message=&quot;parentMsg&quot;&gt;&lt;/child&gt;&lt;/div&gt;</code></pre><blockquote><p>如果要子组件把数据传递给父组件，就需要<a href="https://vuefe.cn/guide/components.html#自定义事件" target="_blank" rel="external">自定义事件</a>。</p></blockquote><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><p>如果想要动态切换不同的组件，就需要使用动态组件，动态地绑定到它的 is 特性。</p><pre><code>var vm = new Vue({  el: &apos;#example&apos;,  data: {    currentView: &apos;home&apos;  },  components: {    home: { /* ... */ },    posts: { /* ... */ },    archive: { /* ... */ }  }})&lt;component v-bind:is=&quot;currentView&quot;&gt;  &lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;&lt;/component&gt;</code></pre><p>如果把切换出去的组件想要保留它的状态或避免重新渲染，添加keep-alive指令参数，非活动组件将被缓存。</p><pre><code>&lt;keep-alive&gt;  &lt;component :is=&quot;currentView&quot;&gt;    &lt;!-- 非活动组件将被缓存！ --&gt;  &lt;/component&gt;&lt;/keep-alive&gt;</code></pre><h4 id="Slots分发内容"><a href="#Slots分发内容" class="headerlink" title="Slots分发内容"></a>Slots分发内容</h4><p>一种方式用来混合父组件的内容与子组件自己的模板。比如说：</p><pre><code>&lt;app&gt;  &lt;app-header&gt;&lt;/app-header&gt;  &lt;app-footer&gt;&lt;/app-footer&gt;&lt;/app&gt;</code></pre><p>app也有自己的模板内容，这时候就需要用到slots。</p><ul><li>编辑作用域</li></ul><p>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。</p><p>分发内容就是在父组件作用域内编译。</p><ul><li>单个Slot</li></ul><p>子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。</p><p>子组件<code>&lt;my-component&gt;</code>：</p><pre><code>&lt;div&gt;    &lt;h2&gt;I&apos;m the child title&lt;/h2&gt;    &lt;slot&gt;      如果没有分发内容则显示我。    &lt;/slot&gt;&lt;/div&gt;</code></pre><p>父组件：</p><pre><code>&lt;div&gt;    &lt;h1&gt;I&apos;m the parent title&lt;/h1&gt;    &lt;my-component&gt;      &lt;p&gt;This is some original content&lt;/p&gt;      &lt;p&gt;This is some more original content&lt;/p&gt;    &lt;/my-component&gt;&lt;/div&gt;</code></pre><p>渲染结果：</p><pre><code>&lt;div&gt;    &lt;h1&gt;I&apos;m the parent title&lt;/h1&gt;    &lt;div&gt;      &lt;h2&gt;I&apos;m the child title&lt;/h2&gt;      &lt;p&gt;This is some original content&lt;/p&gt;      &lt;p&gt;This is some more original content&lt;/p&gt;    &lt;/div&gt;&lt;/div&gt;</code></pre><ul><li>具名Slots</li></ul><p>就是带有name的slot,根据name,对应替换slot。可以有一个匿名 slot ，它是默认 slot ，作为找不到匹配的内容片段的备用插槽。没有备用插槽内容则被抛弃。</p><p>组件<code>&lt;app-layout&gt;</code>:</p><pre><code>&lt;div class=&quot;container&quot;&gt;    &lt;header&gt;      &lt;slot name=&quot;header&quot;&gt;&lt;/slot&gt;    &lt;/header&gt;    &lt;main&gt;      &lt;slot&gt;&lt;/slot&gt;    &lt;/main&gt;    &lt;footer&gt;      &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;    &lt;/footer&gt;&lt;/div&gt;</code></pre><p>父组件模版：</p><pre><code>&lt;app-layout&gt;    &lt;h1 slot=&quot;header&quot;&gt;Here might be a page title&lt;/h1&gt;    &lt;p&gt;A paragraph for the main content.&lt;/p&gt;    &lt;p&gt;And another one.&lt;/p&gt;    &lt;p slot=&quot;footer&quot;&gt;Here&apos;s some contact info&lt;/p&gt;&lt;/app-layout&gt;</code></pre><p>渲染结果：</p><pre><code>&lt;div class=&quot;container&quot;&gt;    &lt;header&gt;      &lt;h1&gt;Here might be a page title&lt;/h1&gt;    &lt;/header&gt;    &lt;main&gt;      &lt;p&gt;A paragraph for the main content.&lt;/p&gt;      &lt;p&gt;And another one.&lt;/p&gt;    &lt;/main&gt;    &lt;footer&gt;      &lt;p&gt;Here&apos;s some contact info&lt;/p&gt;    &lt;/footer&gt;&lt;/div&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue的&lt;a href=&quot;https://vuefe.cn/guide/components.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;组件&lt;/a&gt;化功能可谓是它的一大亮点，通过将页面上某一组件的html、CSS、js代码放入一个.vue的文件中进行管理可以大大提高代码的维护性。&lt;br&gt;目前直接使用ES6的模块化功能，再结合Webpack进行相应打包是最热门的方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://peggy3399.github.io/tags/vue/"/>
    
      <category term="component" scheme="https://peggy3399.github.io/tags/component/"/>
    
  </entry>
  
  <entry>
    <title>vue-router</title>
    <link href="https://peggy3399.github.io/2017/12/28/vue-router/"/>
    <id>https://peggy3399.github.io/2017/12/28/vue-router/</id>
    <published>2017-12-28T07:47:36.000Z</published>
    <updated>2017-12-28T08:08:48.249Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h4><pre><code>npm install vue-router --save</code></pre><p>vue路由主要就是通过使用 router-link(默认会被渲染成一个 <code>&lt;a&gt;</code> 标签) 组件来导航，通过传入 <code>to</code> 属性指定链接, 最后渲染在<code>&lt;router-view&gt;</code>中，实现SPA。</p><pre><code>&lt;p&gt;    &lt;router-link to=&quot;/foo&quot;&gt;Go to Foo&lt;/router-link&gt;&lt;/p&gt;&lt;router-view&gt;&lt;/router-view&gt;</code></pre><p>我目前了解的主要是webpack + ES2015实现vue。如果要实现路由，文件基本写法就是：</p><a id="more"></a><ul><li>调用 Vue.use(VueRouter)</li><li>定义路由组件(import导入需要渲染的组件)</li><li>定义路由</li><li>创建router实例</li><li>创建挂载根实例(就是路由最终在页面实现的根元素)</li></ul><h4 id="基本写法："><a href="#基本写法：" class="headerlink" title="基本写法："></a>基本写法：</h4><pre><code>import Vue from &apos;vue/dist/vue&apos;import VueRouter from &apos;vue-router&apos;// 1. Use plugin.// This installs &lt;router-view&gt; and &lt;router-link&gt;,// and injects $router and $route to all router-enabled child componentsVue.use(VueRouter)// 2. Define route componentsconst Home = { template: &apos;&lt;div&gt;home&lt;/div&gt;&apos; }const Foo = { template: &apos;&lt;div&gt;foo&lt;/div&gt;&apos; }const Bar = { template: &apos;&lt;div&gt;bar&lt;/div&gt;&apos; }// 3. Create the routerconst router = new VueRouter({  mode: &apos;history&apos;,  base: __dirname,  routes: [    { path: &apos;/&apos;, component: Home },    { path: &apos;/foo&apos;, component: Foo },    { path: &apos;/bar&apos;, component: Bar }  ]})// 4. Create and mount root instance.// Make sure to inject the router.// Route components will be rendered inside &lt;router-view&gt;.new Vue({  router,  template: `    &lt;div id=&quot;app&quot;&gt;      &lt;h1&gt;Basic&lt;/h1&gt;      &lt;ul&gt;        &lt;li&gt;&lt;router-link to=&quot;/&quot;&gt;/&lt;/router-link&gt;&lt;/li&gt;        &lt;li&gt;&lt;router-link to=&quot;/foo&quot;&gt;/foo&lt;/router-link&gt;&lt;/li&gt;        &lt;li&gt;&lt;router-link to=&quot;/bar&quot;&gt;/bar&lt;/router-link&gt;&lt;/li&gt;      &lt;/ul&gt;      &lt;router-view class=&quot;view&quot;&gt;&lt;/router-view&gt;    &lt;/div&gt;  `}).$mount(&apos;#app&apos;)</code></pre><ul><li>mode(模式)选项取值为： (默认是 “hash”):</li><li>“hash” ：hash就是利用#做路由切换</li><li>“history” ：history是利用 history.pushState API 来完成 URL 跳转而无须重新加载页面。（需要后台配置）</li><li>“abstract” ：abstract一样，只不过，history会记录历史位置</li><li>base：用的基路径。例如，如果整个单页应用服务在 /app/ 下，然后 base 就应该设为 “/app/“。</li><li>linkActiveClass：全局配置 <code>&lt;router-link&gt;</code> 的默认『激活 class 类名』</li><li>scrollBehavior 滚动行为</li></ul><blockquote><p>注意: 这个功能只在 HTML5 history 模式下可用。</p></blockquote><pre><code>const router = new VueRouter({  routes: [...],  scrollBehavior (to, from, savedPosition) {    // return 期望滚动到哪个的位置  }})</code></pre><p>例子1：对于所有路由导航，简单地让页面滚动到顶部。</p><pre><code>scrollBehavior (to, from, savedPosition) {    return { x: 0, y: 0 }}</code></pre><p>例子2：返回 savedPosition，在按下 后退/前进 按钮时，就会像浏览器的原生表现那样：</p><pre><code>scrollBehavior (to, from, savedPosition) {    if (savedPosition) {        return savedPosition    } else {        return { x: 0, y: 0 }    }}</code></pre><p>例子3：模拟『滚动到锚点』的行为：</p><pre><code>scrollBehavior (to, from, savedPosition) {    if (to.hash) {        return {          selector: to.hash        }    }}</code></pre><blockquote><p><a href="https://github.com/vuejs/vue-router/blob/next/examples/scroll-behavior/app.js" target="_blank" rel="external">一个完整例子</a></p></blockquote><h4 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h4><p><code>&lt;router-link&gt;</code>还有以下属性参数：</p><ul><li>to: 表示目标路由的链接。当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。</li><li>tag: 渲染为的 html 元素类型，默认是<code>&lt;a&gt;</code>.</li><li>exact: 用于控制当前激活项的匹配行为。<br>举个例子，如果当前的路径是 /a 开头的，那么<code>&lt;router-link to=&quot;/a&quot;&gt;</code> 也会被设置 CSS 类名。</li><li>append: 设置 append 属性后，则在当前（相对）路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b。</li><li>replace: 设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，于是导航后不会留下 history 记录。</li><li>active-class: 当链接项激活时增加的 CSS 样式，默认值: “router-link-active”。</li></ul><blockquote><p>用<code>&lt;router-link&gt;</code>可以渲染外层元素，包裹着内层的原生 <code>&lt;a&gt;</code> 标签。</p></blockquote><h4 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h4><p>就是组件被渲染时要填的坑。</p><ul><li>路由嵌套</li></ul><p>如果使用路由的嵌套，组件包含自己的嵌套 <code>&lt;router-view&gt;</code>就可以。</p><pre><code>const User = {  template: `    &lt;div class=&quot;user&quot;&gt;      &lt;h2&gt;User {{ $route.params.id }}&lt;/h2&gt;      &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;  `}</code></pre><p>这时就需要在路由路径配置当中，写上children，然后进行组件自己的路由，children 配置就是像 routes 配置一样的路由配置数组。</p><pre><code>const router = new VueRouter({  routes: [    { path: &apos;/user/:id&apos;, component: User,      children: [        {          // 当 /user/:id/profile 匹配成功，          // UserProfile 会被渲染在 User 的 &lt;router-view&gt; 中          path: &apos;profile&apos;,          component: UserProfile        },        {          // 当 /user/:id/posts 匹配成功          // UserPosts 会被渲染在 User 的 &lt;router-view&gt; 中          path: &apos;posts&apos;,          component: UserPosts        }      ]    }  ]})</code></pre><ul><li>命名视图</li></ul><p>想同时（同级）展示多个视图，而不是嵌套展示,这时可以设置多个出口，也就是<code>&lt;router-view &gt;</code>，如果 <code>&lt;router-view &gt;</code> 没有设置名字，那么默认为 default。</p><pre><code>&lt;router-view class=&quot;view one&quot;&gt;&lt;/router-view&gt;&lt;router-view class=&quot;view two&quot; name=&quot;a&quot;&gt;&lt;/router-view&gt;&lt;router-view class=&quot;view three&quot; name=&quot;b&quot;&gt;&lt;/router-viewconst router = new VueRouter({  routes: [    {      path: &apos;/&apos;,      components: {        default: Foo,        a: Bar,        b: Baz      }    }  ]})</code></pre><h4 id="router的重定向和别名"><a href="#router的重定向和别名" class="headerlink" title="router的重定向和别名"></a>router的重定向和别名</h4><ul><li>重定向</li></ul><p>重定向我的理解就是重新定方向，本来路由要走的/a这个路由，由于重定向就会改变为/b。写法:</p><pre><code>{ path: &apos;/a&apos;, redirect: &apos;/b&apos; }</code></pre><p>也可以是有name的路由：</p><pre><code>{ path: &apos;/a&apos;, redirect: { name: &apos;foo&apos; }}</code></pre><p>甚至是一个方法，动态返回重定向目标：</p><pre><code>const router = new VueRouter({  routes: [    { path: &apos;/a&apos;, redirect: to =&gt; {      // 方法接收 目标路由 作为参数      // return 重定向的 字符串路径/路径对象    }}  ]})</code></pre><blockquote><p><a href="https://github.com/vuejs/vue-router/blob/next/examples/redirect/app.js" target="_blank" rel="external">一个好的例子</a></p></blockquote><ul><li>别名</li></ul><p>别名就类似于我们的小名，/a 的别名是 /b，意味着，当用户访问 /b 时，URL 会保持为 /b，但是路由匹配则为 /a，就像用户访问 /a 一样。写法：</p><pre><code>{ path: &apos;/a&apos;, component: A, alias: &apos;/b&apos; }</code></pre><h4 id="router实例的属性和方法"><a href="#router实例的属性和方法" class="headerlink" title="router实例的属性和方法"></a>router实例的属性和方法</h4><ul><li>属性</li></ul><p>router.app: 配置了 router 的 Vue 根实例。<br>router.mode: 路由使用的 模式。<br>router.currentRoute: 当前路由对应的 路由信息对象.</p><ul><li>方法</li></ul><p>router.beforeEach(guard)<br>router.afterEach(hook)</p><p>增加全局的导航钩子。参考 导航钩子.</p><p>router.push(location)<br>router.replace(location)<br>router.go(n)：这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。<br>router.back()<br>router.forward()</p><p>动态的导航到一个新 url。参考 编程式导航.</p><ul><li>router.getMatchedComponents()</li></ul><p>返回当前路由匹配的组件数组（是数组的定义/构造类，不是实例）。通常在服务端渲染的数据预加载时时候。</p><h4 id="导航钩子"><a href="#导航钩子" class="headerlink" title="导航钩子"></a>导航钩子</h4><p>正如其名，vue-router 提供的导航钩子主要用来拦截导航，让它完成跳转或取消。有多种方式可以在路由导航发生时执行钩子：全局的, 单个路由独享的, 或者组件级的。</p><ul><li>全局钩子</li></ul><p>可以使用 router.beforeEach 注册一个全局的 before 钩子：</p><pre><code>const router = new VueRouter({ ... })router.beforeEach((to, from, next) =&gt; {      // ...})</code></pre><p>当一个导航触发时，全局的 before 钩子按照创建顺序调用。钩子是异步解析执行，此时导航在所有钩子 resolve 完之前一直处于 等待中。</p><h2 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h2><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><h2 id="路由信息对象"><a href="#路由信息对象" class="headerlink" title="路由信息对象"></a>路由信息对象</h2>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;安装：&quot;&gt;&lt;a href=&quot;#安装：&quot; class=&quot;headerlink&quot; title=&quot;安装：&quot;&gt;&lt;/a&gt;安装：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;npm install vue-router --save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;vue路由主要就是通过使用 router-link(默认会被渲染成一个 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 标签) 组件来导航，通过传入 &lt;code&gt;to&lt;/code&gt; 属性指定链接, 最后渲染在&lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;中，实现SPA。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
    &amp;lt;router-link to=&amp;quot;/foo&amp;quot;&amp;gt;Go to Foo&amp;lt;/router-link&amp;gt;
&amp;lt;/p&amp;gt;
&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我目前了解的主要是webpack + ES2015实现vue。如果要实现路由，文件基本写法就是：&lt;/p&gt;
    
    </summary>
    
    
      <category term="路由" scheme="https://peggy3399.github.io/tags/%E8%B7%AF%E7%94%B1/"/>
    
      <category term="vue" scheme="https://peggy3399.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-advanced</title>
    <link href="https://peggy3399.github.io/2017/12/28/vue-advanced/"/>
    <id>https://peggy3399.github.io/2017/12/28/vue-advanced/</id>
    <published>2017-12-28T07:46:57.000Z</published>
    <updated>2017-12-28T08:36:03.665Z</updated>
    
    <content type="html"><![CDATA[<p>Vue提供多种不同的过渡效果 。</p><ul><li>在 CSS 过渡和动画中自动应用 class</li><li>可以配合使用第三方 CSS 动画库，如 Animate.css</li><li>在过渡钩子函数中使用 JavaScript 直接操作 DOM</li><li>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</li></ul><a id="more"></a><h4 id="1-安装："><a href="#1-安装：" class="headerlink" title="1. 安装："></a>1. 安装：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-transition</span><br></pre></td></tr></table></figure><h4 id="2-CSS过渡"><a href="#2-CSS过渡" class="headerlink" title="2. CSS过渡"></a>2. CSS过渡</h4><h5 id="2-1-单元素-组件的过渡"><a href="#2-1-单元素-组件的过渡" class="headerlink" title="2.1 单元素/组件的过渡"></a>2.1 单元素/组件的过渡</h5><p>Vue 提供了 transition 的封装组件，所以我们在一下情景中都可以使用过渡。</p><ul><li>条件渲染 （使用 v-if）</li><li>条件展示 （使用 v-show）</li><li>动态组件</li><li>组件根节点</li></ul><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;demo&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;show = !show&quot;&gt;</span><br><span class="line">    Toggle</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">  &lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#demo&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.fade-enter-active, .fade-leave-active &#123;</span><br><span class="line">  transition: opacity .5s</span><br><span class="line">&#125;</span><br><span class="line">.fade-enter, .fade-leave-active &#123;</span><br><span class="line">  opacity: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="2-2-过渡的CSS-类名"><a href="#2-2-过渡的CSS-类名" class="headerlink" title="2.2 过渡的CSS-类名"></a>2.2 过渡的CSS-类名</h5><p>会有 4 个(CSS)类名在 enter/leave 的过渡中切换：</p><ul><li>v-enter: 定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。</li><li>v-enter-active: 定义进入过渡的结束状态。在元素被插入时生效，在 transition/animation 完成之后移除。</li><li>v-leave: 定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。</li><li>v-leave-active: 定义离开过渡的结束状态。在离开过渡被触发时生效，在 transition/animation 完成之后移除。</li></ul><h4 id="3-CSS动画"><a href="#3-CSS动画" class="headerlink" title="3. CSS动画"></a>3. CSS动画</h4><p>CSS动画是在animationend 事件触发时删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;show = !show&quot;&gt;Toggle show&lt;/button&gt;</span><br><span class="line">  &lt;transition name=&quot;bounce&quot;&gt;</span><br><span class="line">    &lt;p v-if=&quot;show&quot;&gt;Look at me!&lt;/p&gt;</span><br><span class="line">  &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#example-2&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.bounce-enter-active &#123;</span><br><span class="line">  animation: bounce-in .5s;</span><br><span class="line">&#125;</span><br><span class="line">.bounce-leave-active &#123;</span><br><span class="line">  animation: bounce-out .5s;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes bounce-in &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: scale(0);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    transform: scale(1.5);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes bounce-out &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: scale(1);</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    transform: scale(1.5);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: scale(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue提供多种不同的过渡效果 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 CSS 过渡和动画中自动应用 class&lt;/li&gt;
&lt;li&gt;可以配合使用第三方 CSS 动画库，如 Animate.css&lt;/li&gt;
&lt;li&gt;在过渡钩子函数中使用 JavaScript 直接操作 DOM&lt;/li&gt;
&lt;li&gt;可以配合使用第三方 JavaScript 动画库，如 Velocity.js&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://peggy3399.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-basic</title>
    <link href="https://peggy3399.github.io/2017/12/28/vue-basic/"/>
    <id>https://peggy3399.github.io/2017/12/28/vue-basic/</id>
    <published>2017-12-28T07:44:49.000Z</published>
    <updated>2017-12-28T08:33:15.736Z</updated>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><a href="https://vuefe.cn" target="_blank" rel="external">Vue.js</a> 是一个提供 MVVM(Model View ViewModel) 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。ViewModel负责连接 View 和 Model，保证视图和数据的一致，这种轻量级的架构让前端开发更加高效、便捷。</p><blockquote><p>vue.js特点就是（1） 简洁 （2） 轻量 （3）快速 （4） 数据驱动 （5）双向绑定（6） 模块友好 （7） 组件化。</p></blockquote><a id="more"></a><h4 id="1-搭建一个webpack-vue项目"><a href="#1-搭建一个webpack-vue项目" class="headerlink" title="1. 搭建一个webpack + vue项目"></a>1. 搭建一个webpack + vue项目</h4><ul><li>npm install -g vue-cli  ==&gt;快速生成项目模版的工具</li><li>vue init webpack my-project ==&gt;基于webpack的项目</li><li>cd my-project</li><li>npm install 安装需要的依赖</li><li>npm run dev</li></ul><h4 id="2-构造器"><a href="#2-构造器" class="headerlink" title="2. 构造器"></a>2. 构造器</h4><p>创建vue实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  // 选项</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-基本用法"><a href="#3-基本用法" class="headerlink" title="3. 基本用法"></a>3. 基本用法</h4><h6 id="3-1-文本"><a href="#3-1-文本" class="headerlink" title="3.1 文本"></a>3.1 文本</h6><p>  数据绑定最基础的形式是文本插值，使用 “Mustache” 语法（双大括号）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;Message: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>  只执行一次插值v-once：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-once&gt;This will never change: &#123;&#123; msg &#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure><h5 id="3-2-原始HTML"><a href="#3-2-原始HTML" class="headerlink" title="3.2 原始HTML"></a>3.2 原始HTML</h5><p>  双大括号会将数据解释为纯文本，如果要输出真正的 HTML ，就需要使用 v-html 指令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-html=&quot;rawHtml&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h5 id="3-3-指令和属性"><a href="#3-3-指令和属性" class="headerlink" title="3.3 指令和属性"></a>3.3 指令和属性</h5><p>  指令 (Directives) 是特殊的带有前缀 v- 的特性。指令的值限定为绑定表达式，指令的职责就是当其表达式的值改变时把某些特殊的行为应用到 DOM 上。<br>  有些指令可以在其名称后面带一个“参数” (Argument)，中间放一个冒号隔开。</p><ul><li>v-bind 指令用于绑定html特性：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;</span><br></pre></td></tr></table></figure><p>由此绑定class有两种写法：<br>v-bind:class和class=”“，但是不推荐混合使用。两者只能选其一！</p><ul><li>v-on 指令，它用于监听 DOM 事件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;&lt;!-- 缩写 --&gt;</span><br></pre></td></tr></table></figure><ul><li>便捷的修饰符（事件处理器详细说明）。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- v-on 指令触发事件时调用 event.preventDefault() --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只在按下回车键的时候触发事件 --&gt;</span><br><span class="line">&lt;input \@keyup.enter=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure><h5 id="3-4-计算属性"><a href="#3-4-计算属性" class="headerlink" title="3.4 计算属性"></a>3.4 计算属性</h5><pre><code>var vm = new Vue({  el: &apos;#demo&apos;,  data: {    firstName: &apos;Foo&apos;,    lastName: &apos;Bar&apos;  },  computed: {    fullName: function () {      return this.firstName + &apos; &apos; + this.lastName    }  }})//Foo Bar</code></pre><p>  计算属性默认只是 getter，不过在需要时你也可以提供一个 setter</p><h5 id="3-5-条件渲染"><a href="#3-5-条件渲染" class="headerlink" title="3.5 条件渲染"></a>3.5 条件渲染</h5><ul><li>v-if</li></ul><p>v-if 是一个指令，需要将它添加到一个元素上。如果想要切换多个元素，此时可以把一个 <code>&lt;template&gt;</code> 元素当做包装元素，并在上面使用 v-if，最终的渲染结果不会包含它。通过控制dom结构的添加与删除控制显示和隐藏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template v-if=&quot;ok&quot;&gt;</span><br><span class="line">  &lt;h1&gt;Title&lt;/h1&gt;</span><br><span class="line">  &lt;p&gt;Paragraph 1&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;Paragraph 2&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li><p>v-show</p><p>v-show的元素会始终渲染并保持在 DOM 中。v-show 是简单的切换元素的 CSS 属性 display。<br>注意 v-show 不支持 <code>&lt;template&gt;</code> 语法。</p><p>v-show 用在组件上时，因为指令的优先级 v-else 会出现问题。另一个 v-show 替换 v-else。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-component v-show=&quot;condition&quot;&gt;&lt;/custom-component&gt;</span><br><span class="line">&lt;p v-show=&quot;!condition&quot;&gt;这可能也是一个组件&lt;/p&gt;</span><br></pre></td></tr></table></figure><ul><li>v-else</li></ul><p>元素必须立即跟在 v-if 或 v-show 元素的后面——否则它不能被识别。</p><h5 id="3-6-列表渲染"><a href="#3-6-列表渲染" class="headerlink" title="3.6 列表渲染"></a>3.6 列表渲染</h5><p>v-for 指令基于一个数组渲染一个列表。形式为 item in items，items 是数据数组，item 是当前数组元素的别名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=&quot;example-1&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">      &#123;&#123; item.message &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">var example1 = new Vue(&#123;</span><br><span class="line">  el: &apos;#example-1&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123;message: &apos;foo&apos; &#125;,</span><br><span class="line">      &#123;message: &apos;Bar&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个只是最基本的用法，v-for还有多种用法，可以看文档的列表循环有详细介绍。</p><h5 id="3-7-事件处理器"><a href="#3-7-事件处理器" class="headerlink" title="3.7 事件处理器"></a>3.7 事件处理器</h5><p>前面提到了监听事件，vue还有</p><ul><li>方法事件处理器(就是添加自定义方法来调用)：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">  &lt;!-- &apos;greet&apos; 是在methods中定义的方法名 --&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;greet&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>内联处理器：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example-3&quot;&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;say(&apos;hi&apos;)&quot;&gt;Say hi&lt;/button&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;say(&apos;what&apos;)&quot;&gt;Say what&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &apos;#example-3&apos;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    say: function (message) &#123;</span><br><span class="line">      alert(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  其实看上去只不顾就是传递了参数。</p><h5 id="3-8-修饰符"><a href="#3-8-修饰符" class="headerlink" title="3.8 修饰符"></a>3.8 修饰符</h5><p>修饰符可以分为事件修饰符和按键修饰符,后面表单控件也有修饰符：</p><h6 id="3-8-1-事件修饰符："><a href="#3-8-1-事件修饰符：" class="headerlink" title="3.8.1 事件修饰符："></a>3.8.1 事件修饰符：</h6><ul><li>.stop</li><li>.prevent</li><li>.capture</li><li>.self</li></ul><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=&quot;doThis&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 提交事件不再重载页面 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent=&quot;onSubmit&quot;&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 修饰符可以串联  --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=&quot;doThat&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;!-- 只有修饰符 --&gt;</span><br><span class="line">&lt;form v-on:submit.prevent&gt;&lt;/form&gt;</span><br><span class="line">&lt;!-- 添加事件侦听器时使用时间捕获模式 --&gt;</span><br><span class="line">&lt;div v-on:click.capture=&quot;doThis&quot;&gt;...&lt;/div&gt;</span><br><span class="line">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span><br><span class="line">&lt;div v-on:click.self=&quot;doThat&quot;&gt;...&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h6 id="3-8-2-按键修饰符："><a href="#3-8-2-按键修饰符：" class="headerlink" title="3.8.2 按键修饰符："></a>3.8.2 按键修饰符：</h6><p>全部的按键别名：</p><ul><li>enter </li><li>tab </li><li>delete(捕获 “删除” 和 “退格” 键)  </li><li>esc </li><li>space </li><li>up  </li><li>down  </li><li>left  </li><li>right</li></ul><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span><br><span class="line">&lt;input @keyup.enter=&quot;submit&quot;&gt;</span><br></pre></td></tr></table></figure></p><h5 id="3-9-表单控件绑定"><a href="#3-9-表单控件绑定" class="headerlink" title="3.9 表单控件绑定"></a>3.9 表单控件绑定</h5><p>可以用 v-model 指令在表单控件元素上创建双向数据绑定。负责监听用户的输入事件以更新数据,根据控件类型它自动选取正确的方法更新元素.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</span><br><span class="line">&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure></p><p>类似与多个勾选框这种情况的(复选框等)，就需要绑定到同一个数组。(vue1.html)</p><h6 id="3-9-1-表单控件修饰符"><a href="#3-9-1-表单控件修饰符" class="headerlink" title="3.9.1 表单控件修饰符"></a>3.9.1 表单控件修饰符</h6><ul><li>.lazy</li><li>.number 自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值）</li><li>.trim 自动过滤用户输入的首尾空格</li></ul><p>用法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在 &quot;change&quot; 而不是 &quot;input&quot; 事件中更新 --&gt;</span><br><span class="line">&lt;input v-model.lazy=&quot;msg&quot; &gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://vuefe.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vue.js&lt;/a&gt; 是一个提供 MVVM(Model View ViewModel) 风格的双向数据绑定的 Javascript 库，专注于View 层。它的核心是 MVVM 中的 VM，也就是 ViewModel。ViewModel负责连接 View 和 Model，保证视图和数据的一致，这种轻量级的架构让前端开发更加高效、便捷。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;vue.js特点就是（1） 简洁 （2） 轻量 （3）快速 （4） 数据驱动 （5）双向绑定（6） 模块友好 （7） 组件化。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="vue" scheme="https://peggy3399.github.io/tags/vue/"/>
    
      <category term="basic" scheme="https://peggy3399.github.io/tags/basic/"/>
    
  </entry>
  
  <entry>
    <title>yarn</title>
    <link href="https://peggy3399.github.io/2017/12/28/yarn/"/>
    <id>https://peggy3399.github.io/2017/12/28/yarn/</id>
    <published>2017-12-28T07:43:41.000Z</published>
    <updated>2017-12-28T08:51:26.669Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h4 id="yarn-搭建vue脚手架"><a href="#yarn-搭建vue脚手架" class="headerlink" title="yarn 搭建vue脚手架"></a>yarn 搭建vue脚手架</h4><h5 id="安装yarn（Windows）"><a href="#安装yarn（Windows）" class="headerlink" title="安装yarn（Windows）"></a>安装<a href="https://yarnpkg.com/zh-Hans/docs/install" target="_blank" rel="external">yarn</a>（Windows）</h5><p>官网有三种安装方式，这里只说最简单的安装程序安装。<br>安装之前需要安装node.js。</p><p>运行curl -o- -L <a href="https://yarnpkg.com/install.sh" target="_blank" rel="external">https://yarnpkg.com/install.sh</a> | bash命令即可安装或者点击<a href="https://github-production-release-asset-2e65be.s3.amazonaws.com/49970642/3b8d1478-5db4-11e7-8857-b0f901597104?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20170801%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20170801T091331Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=7a540044b7da221b5fe4195d1610043dda2a39eeb10c89ce893a85d4d2192547&amp;X-Amz-SignedHeaders=host&amp;actor_id=21299272&amp;response-content-disposition=attachment%3B%20filename%3Dyarn-0.27.5.msi&amp;response-content-type=application%2Foctet-stream" target="_blank" rel="external">安装</a></p><blockquote><p>查看版本 yarn –version vue –version</p></blockquote><h4 id="简单形式"><a href="#简单形式" class="headerlink" title="简单形式"></a><a href="https://mp.weixin.qq.com/s?__biz=MzA5NTM2MTEzNw%3D%3D&amp;idx=1&amp;mid=2736710892&amp;sn=8a086429d6f91b7248a7f327d33c20ce" target="_blank" rel="external">简单形式</a></h4><ul><li>yarn add global vue-cli</li><li>yarn vue</li><li>vue init webpack-simple my-project</li><li>cd my-project</li><li>yarn </li><li>yarn run dev</li></ul><h4 id="复杂形式"><a href="#复杂形式" class="headerlink" title="复杂形式"></a>复杂形式</h4><ul><li>yarn add global vue-cli</li><li>vue init webpack my-project</li><li>cd my-project</li><li>yarn </li><li>yarn run dev</li></ul><blockquote><p>打开你的浏览器连到<a href="http://localhost:8080/就可以看到运行的界面。" target="_blank" rel="external">http://localhost:8080/就可以看到运行的界面。</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;yarn-搭建vue脚手架&quot;&gt;&lt;a href=&quot;#yarn-搭建vue脚手架&quot; class=&quot;headerlink&quot; title=&quot;yarn 搭建vue脚手架&quot;&gt;&lt;/a&gt;yarn 搭建vue脚手架&lt;/h4&gt;&lt;h5 id=&quot;安装y
      
    
    </summary>
    
    
      <category term="yarn" scheme="https://peggy3399.github.io/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>心灵治愈系</title>
    <link href="https://peggy3399.github.io/2017/12/28/%E5%8F%AF%E6%83%9C%E4%B8%8D%E6%98%AF%E4%BD%A0/"/>
    <id>https://peggy3399.github.io/2017/12/28/可惜不是你/</id>
    <published>2017-12-28T03:27:59.000Z</published>
    <updated>2017-12-28T09:48:57.253Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/Peggy3399/Peggy3399.github.io/blob/master/images/avatar/timg.png?raw=true" alt=""></p><p>是不是有点怀疑人生，是不是有点迷茫，是不是很累了，来一场心灵的旅程放松一下！！！</p><a id="more"></a><ul><li><p>我以为长大就能解决所有问题，但长大才是问题的开始…</p></li><li><p>人生最遗憾的,莫过于,轻易地放弃了不该放弃的,固执地坚持了不该坚持的…</p></li><li><p>有些时候，正是为了爱才悄悄躲开，躲开的是身影，躲不开的却是那份默默的情怀…</p></li><li><p>有些失去是注定的,有些缘分是永远不会有结果的，爱一个人不一定会拥有,拥有一个人就一定要好好去爱…</p></li><li><p>恋爱，在感情上，当你想征服对方的时候，实际上已经在一定程度上被对方征服了。首先是对方对你的吸引，然后才是你征服对方的欲望…</p></li><li><p>如果爱上，就不要轻易放过机会。莽撞，可能使你后悔一阵子；怯懦，却可能使你后悔一辈子…</p></li><li><p>爱情还没有来到，日子是无忧无虑的；最痛苦的，也不过是测验和考试。当时觉得很大压力，后来回望，不过是多么的微小…</p></li><li><p>曾经相遇，总胜过从未碰头…</p></li><li><p>爱，从来就是一件千回百转的事。不曾被离弃，不曾受伤害，怎懂得爱人？爱，原来是一种经历，但愿人长久…</p></li><li><p>人生的大部份时间里，承诺同义词是束缚，奈何我们向往束缚…</p></li><li><p>我们放下尊严, 放下个性，放下固执，都只是因为放不下一个人…</p></li><li><p>如果，不幸福，如果，不快乐，那就放手吧；如果，舍不得，如果，放不下，那就痛苦吧…</p></li><li><p>人的一生就像在拉屎，有时你已经很努力了，可出来的是一个屁…</p></li><li><p>“什么叫乐观派的人？”“这个……就像茶壶一样，屁股都烧的红红的，它还有心情吹口哨。”…</p></li><li><p>如果有一天，不再喜欢你了，我的生活会不会又像从前那样孤单、颓废……我不想再要那样的生活，所以，在我还没有放弃你之前，请你,至少要先喜欢上我…</p></li><li><p>“以后你的头归我管，你要是敢蹂躏它，我就跟你没完。” “那还有什么是我自己的吗？” “很抱歉，似乎除了我你一无所有。”…</p></li><li><p>承诺本来就是男人与女人的一场角力，有时皆大欢喜，大部份的情况却两败俱伤…</p></li><li><p>只想找一个在我失意时可以承受我的眼泪，在我快乐时，可以让我咬一口的肩膊…</p></li><li><p>好的爱情是你透过一个男人看到世界，坏的爱情是你为了一个人舍弃世界。总以为自己才是付出的那个，其实，他为我放弃的更多…</p></li><li><p>当深爱的人与最好的朋友都在你身边时，这大约就是人生最快乐的事了…</p></li><li><p>原来的我们，都敢理直气壮地说一辈子…</p></li><li><p>因为承诺，所以我们愿意等…</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/Peggy3399/Peggy3399.github.io/blob/master/images/avatar/timg.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;是不是有点怀疑人生，是不是有点迷茫，是不是很累了，来一场心灵的旅程放松一下！！！&lt;/p&gt;
    
    </summary>
    
    
      <category term="语录" scheme="https://peggy3399.github.io/tags/%E8%AF%AD%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Angular2-basic</title>
    <link href="https://peggy3399.github.io/2017/11/14/angular2-basic/"/>
    <id>https://peggy3399.github.io/2017/11/14/angular2-basic/</id>
    <published>2017-11-14T03:47:32.000Z</published>
    <updated>2017-12-28T06:21:48.726Z</updated>
    
    <content type="html"><![CDATA[<h4 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h4><p>Angular2 指令是构成Angular2应用程序的重要组成部分，指令主要用来对模板的标签或者元素附加一些新的特性或者功能，改变一个 DOM 元素的外观或行为，主要存在两种类型的指令：</p><ul><li>结构型指令：会通过添加 / 删除 DOM 元素来更改 DOM 树布局</li><li>属性型指令：指令改变一个元素的外观或行为。</li></ul><a id="more"></a><h5 id="NgStyle"><a href="#NgStyle" class="headerlink" title="NgStyle"></a>NgStyle</h5><p>NgStyle 指令，可以通过angular表达式为DOM元素设置一个CSS属性。NgStyle真正厉害之处是可以使用动态值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;color&quot; #colorinput&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;fontSize&quot; #fontinput&gt;</span><br><span class="line">    &lt;button (click)=&quot;apply(colorinput.value, fontinput.value)&quot;&gt; apply &lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span [ngStyle]=&quot;&#123;color: colorinput.value, &apos;background-color&apos;: &apos;blue&apos;&#125;&quot; [style.font-size.px]=&quot;fontSize&quot;&gt;color :&#123;&#123; colorinput.value &#125;&#125; font: &#123;&#123;fontinput.value&#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;p [ngStyle]=&quot;style()&quot;&gt;hello hello hello&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="NgIf"><a href="#NgIf" class="headerlink" title="NgIf"></a>NgIf</h5><p>ngIf指令是用于当你想要通过某个条件显示或者隐藏一个元素时，条件是由你传递给该指令的表达式结果来确定的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div *ngIf=&quot;false&quot;&gt;&lt;/div&gt; &lt;!-- never displayed --&gt;</span><br><span class="line">&lt;div *ngIf=&quot;a &gt; b&quot;&gt;&lt;/div&gt; &lt;!-- displayed if a is more than b --&gt;</span><br><span class="line">&lt;div *ngIf=&quot;str === &apos;yes&apos;&quot;&gt;&lt;/div&gt; &lt;!-- displayed if str holds the string &quot;yes&quot; --&gt;</span><br><span class="line">&lt;div *ngIf=&quot;myFunc()&quot;&gt;&lt;/div&gt; &lt;!-- displayed if myFunc returns a true value --&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Angular2 没有提供内置的ng-show，如果你的目标只是改变一个元素的css，你可以考虑使用ngStyle或class指令。只是用[hidden]属性，没有[show]属性。</p></blockquote><h5 id="NgClass"><a href="#NgClass" class="headerlink" title="NgClass"></a>NgClass</h5><p>NgClass指令，在你的HTML模板通过ngClass属性表示，允许您为一个给定的DOM元素动态地设置和改变CSS类。</p><ul><li>使用方式是通过对象字符串，对象用key作为类名称，value应该是一个true/false值，以指示该类是否应该应用。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [ngClass]=&quot;&#123;bordered: false&#125;&quot;&gt;This is never bordered&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>在组件中声明一个数组变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.classList = [&apos;blue&apos;, &apos;round&apos;];</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;base&quot; [ngClass]=&quot;classList&quot;&gt;</span><br><span class="line">  This is &#123;&#123; classList.indexOf(&apos;blue&apos;) &gt; -1 ? &quot;&quot; : &quot;NOT&quot; &#125;&#125; blue and &#123;&#123; classList.indexOf(&apos;round&apos;) &gt; -1 ? &quot;&quot; : &quot;NOT&quot; &#125;&#125; round</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>通过对象数组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [ngClass]=&quot;&#123;true:&apos;change1&apos;,false:&apos;change2&apos;&#125;[className]&quot;&gt;This is Angular1&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div [class.change1]=&quot;className&quot;&gt;This is Angular2&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>通过key/value</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [ngClass]=&quot;&#123;&apos;change1&apos;:select1,&apos;change2&apos;:select2,&apos;change3&apos;:select3&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div [ngClass]=&quot;&#123;&apos;change1&apos;:(className == &apos;select1&apos;)&#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="ngSwitch"><a href="#ngSwitch" class="headerlink" title="ngSwitch"></a>ngSwitch</h5><p>NgSwitch指令可以应用在任何HTML元素上，它评估元素的ngSwitch属性值，并根据这个值 决定应用哪些template的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul [ngSwitch]=&quot;choice&quot;&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;1&quot;&gt;First choice&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;2&quot;&gt;Second choice&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;3&quot;&gt;Third choice&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;4&quot;&gt;Fourth choice&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchCase=&quot;2&quot;&gt;Second choice, again&lt;/li&gt;</span><br><span class="line">    &lt;li *ngSwitchDefault&gt;Default choice&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><blockquote><p>可以同时显示多个分支例如,在上面的示例中choice是2时,第二和第五li将渲染</p></blockquote><h5 id="NgNonBindable"><a href="#NgNonBindable" class="headerlink" title="NgNonBindable"></a>NgNonBindable</h5><p>比方说，我们要渲染在我们模板中的纯字符串。通常，该文本将因为我们使用的模板语法绑定到content变量的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;bordered&quot;&gt;&#123;&#123; content &#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;pre&quot; ngNonBindable&gt;</span><br><span class="line">    &amp;lt;-- This is what &#123;&#123; content &#125;&#125; rendered &lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="NgTemplateOutlet"><a href="#NgTemplateOutlet" class="headerlink" title="NgTemplateOutlet"></a>NgTemplateOutlet</h5><p>我们可以建立一个模板,使用这个模板,通过在不同的上下文可重用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template  #foo let-name=&quot;name&quot; let-skills=&quot;skills&quot;&gt;</span><br><span class="line">    &lt;h4&gt;&#123;&#123;name&#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li *ngFor=&quot;let s of skills&quot;&gt;&#123;&#123;s&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;div [ngTemplateOutlet]=&quot;foo&quot; [ngOutletContext]=&quot;msg1&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;h1 style=&quot;background: yellow;&quot;&gt;&#123;&#123;text&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;div [ngTemplateOutlet]=&quot;foo&quot; [ngOutletContext]=&quot;msg2&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><h5 id="属性型指令"><a href="#属性型指令" class="headerlink" title="属性型指令"></a>属性型指令</h5><ul><li><a href="http://blog.csdn.net/shenlei19911210/article/details/53218074" target="_blank" rel="external">Directive</a> 提供@Directive装饰器功能。</li><li>ElementRef：是一个服务，注入到指令构造函数中，这样代码可以访问 DOM 元素。</li><li>Input：将数据从绑定表达式传达到指令中。</li><li>Renderer：写在构造函数中，让代码可以改变 DOM 元素的属性等（setElementAttribute，setElementStyle，setElementClass等）。</li><li>host：添加监听事件。</li></ul><p>@Directive装饰器需要一个 CSS 选择器(属性名称加方括号-[attr])，以便从模板中识别出关联到这个指令的 HTML。<br>指令的选择器是[myHighlight]，Angular将会在模板中找到所有带myHighlight属性的元素。</p><blockquote><p>一定要记住在 @NgModule 的 declarations 数组中显示的声明我们定义的指令。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Directive, ElementRef, Renderer, HostListener, Input &#125; from &apos;@angular/core&apos;;</span><br><span class="line"></span><br><span class="line">@Directive(&#123;</span><br><span class="line">    selector: &apos;[prefixHightlight]&apos;,</span><br><span class="line">    host: &#123;</span><br><span class="line">        &apos;(click)&apos;: &apos;onclick()&apos;,</span><br><span class="line">        &apos;(mouseleave)&apos;: &apos;onMouseLeave()&apos;,</span><br><span class="line">        &apos;(mouseenter)&apos;: &apos;onMouseEnter()&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用数据绑定向指令传递值,在定义这个属性的时候，我们调用了@Input()装饰器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Input(&apos;prefixHightlight&apos;) highlightColor: string;</span><br></pre></td></tr></table></figure><p>添加监听事件另一种就是通过 @HostListener，直接操纵 DOM 元素的方式给宿主 DOM 元素附加一个事件监听器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@HostListener(&apos;mouseenter&apos;)</span><br><span class="line">onMouseEnter() &#123;&#125;</span><br></pre></td></tr></table></figure><h5 id="结构型指令"><a href="#结构型指令" class="headerlink" title="结构型指令"></a>结构型指令</h5><p><a href="http://blog.csdn.net/u010130282/article/details/53613297" target="_blank" rel="external">结构型指令</a>需要在构造方法注入TemplateRef和ViewContainerRef这两个服务，TemplateRef用于访问组件模板，ViewContainerRef是渲染器，用于往DOM插入或移除模板等。</p><blockquote><p>注意属性型和结构型子在dom元素中的写法</p></blockquote><h4 id="NgZone"><a href="#NgZone" class="headerlink" title="NgZone"></a>NgZone</h4><p>Angular应用程序通过组件实例和模板之间进行数据交互，也就是将组件的数据和页面DOM元素关连起来，当数据有变化后，NG2能够监测到这些变化并更新视图，反之亦然，它的数据流向是单项的，通过属性绑定和事件绑定来实现数据的流入和流出，数据从属性绑定流入组件，从事件流出组件，数据的双向绑定就是通过这样来实现的。</p><h5 id="进行变化监测的情形"><a href="#进行变化监测的情形" class="headerlink" title="进行变化监测的情形"></a>进行变化监测的情形</h5><p>angular需要去更新视图的情形： </p><ul><li>event：在view中绑定事件来监听用户的操作，如果数据有变更则更新视图；</li><li>xmlHTTPRequest/webSocket：例如从远端服务拉取对应的数据，这是一个异步的过程；</li><li>timeout：例如：setTimeout, setInterval, requestAnimationFrame都是在某个延时后触发。</li></ul><p>(requestAnimationFrame)[<a href="http://www.zhangxinxu.com/wordpress/tag/requestanimationframe/" target="_blank" rel="external">http://www.zhangxinxu.com/wordpress/tag/requestanimationframe/</a>]</p><p>这些都是异步的处理，即需要使用异步回调函数，结论就是，不管任何时候的一个异步操作，我们应用程序状态可能已经被改变，这就需要告诉Angular去更新视图。</p><p><a href="http://www.cnblogs.com/czaiz/p/6530820.html" target="_blank" rel="external">关于zone</a>：简单的可以概述成zone是一个异步事件拦截器，也就是说zone能够hook到异步任务的执行上下文，以此来处理一些操作，比如说，在我们每次启动或者完成一个异步的操作、进行堆栈的跟踪处理、某段功能代码进入或者离开zone，我们可以在这些关键的节点重写我们所需处理的方法。</p><p>实际上，ngZone是基于<a href="http://www.cnblogs.com/whitewolf/p/zone-js.html" target="_blank" rel="external">zone.js</a>来实现的，Angular2 fork了zone.js，它是zone派生出来的一个子zone，在Angular环境内注册的异步事件都运行在这个子zone上(因为ngZone拥有整个Angular运行环境的执行上下文)。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;内置指令&quot;&gt;&lt;a href=&quot;#内置指令&quot; class=&quot;headerlink&quot; title=&quot;内置指令&quot;&gt;&lt;/a&gt;内置指令&lt;/h4&gt;&lt;p&gt;Angular2 指令是构成Angular2应用程序的重要组成部分，指令主要用来对模板的标签或者元素附加一些新的特性或者功能，改变一个 DOM 元素的外观或行为，主要存在两种类型的指令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结构型指令：会通过添加 / 删除 DOM 元素来更改 DOM 树布局&lt;/li&gt;
&lt;li&gt;属性型指令：指令改变一个元素的外观或行为。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="angular" scheme="https://peggy3399.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular2路由</title>
    <link href="https://peggy3399.github.io/2017/11/14/angular2-routes/"/>
    <id>https://peggy3399.github.io/2017/11/14/angular2-routes/</id>
    <published>2017-11-14T03:45:21.000Z</published>
    <updated>2017-12-28T06:21:27.655Z</updated>
    
    <content type="html"><![CDATA[<h4 id="路由概述"><a href="#路由概述" class="headerlink" title="路由概述"></a>路由概述</h4><p>  大多数带路由的应用都要在 index.html 的 <head> 标签下先添加一个 <base> 元素，来告诉路由器该如何合成导航用的 URL 。</head></p><p>  Angular2包含了一个路由框架，我们只需要定义一个个的路径、和它对应的组件，然后在页面跳转时也使用Angular2的方式，我们就能够很方便的实现路由控制。</p><a id="more"></a><p>  Angular2的路由主要包括下面4个部分：</p><ul><li>路由定义：通俗来说定义的就是一个URL路径，打开的是哪个页面，由哪个控制器来控制数据交互和用户交互。在Angular2中，这个控制器就是组件(Component)，页面就是在组件定义中定义的这个组件对应的模板页面。</li><li>路由器：也就是分发器。它是由Angular2的框架实现。当我们点击一个链接时，就是由它来确定要打开哪一个组件，怎么封装和传递参数等。</li><li>导航：也就是从一个页面打开另一个页面。一般有两种方式，一种是通过页面上的一个链接link，另一种是在js里面使用代码导航。 </li><li>参数：当我们在页面之间跳转时，通常都需要传递参数。除了常用的通过url参数来传递以外，在REST风格的路径设计中，我们经常需要使用某一个id来作为url的一部分，也就是说把参数放在url里面</li></ul><h4 id="路由定义"><a href="#路由定义" class="headerlink" title="路由定义"></a>路由定义</h4><p>  我们需要定义我们的路由，也就是路径-组件的对应关系。通常我们会创建一个单独的文件 app.routes.ts，基本的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import&#123; Routes &#125;from&apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">export const routes: Routes = [ </span><br><span class="line">  &#123; path: &apos;&apos;, redirectTo: &apos;/todost&apos;, pathMatch: &apos;full&apos; &#125;, </span><br><span class="line">  &#123; path: &apos;todost&apos;, component: TodoListComponent &#125;, </span><br><span class="line">  &#123; path: &apos;todo/detail/:id&apos;, component: TodoDetailComponent &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>  需要在app.module.ts中引入路由模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; RouterModule &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">imports: [</span><br><span class="line">  RouterModule.forRoot(routes)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>如果我们要定义子模块和子模块路由，就需要使用 AppRoutingModule的方式。在你的开发中，也建议使用路由模块的定义方式。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; RouterModule, Routes &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">const routes: Routes = [&#123;</span><br><span class="line">    path: &apos;&apos;,</span><br><span class="line">    redirectTo: &apos;/todo/list&apos;,</span><br><span class="line">    pathMatch: &apos;full&apos;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;todo/list&apos;,</span><br><span class="line">    component: TodoListComponent</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;todo/detail/:id&apos;,</span><br><span class="line">    component: TodoDetailComponent</span><br><span class="line">&#125;];</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [RouterModule.forRoot(routes)],</span><br><span class="line">    exports: [RouterModule]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   Routes其实就是一个路由列表类型 Route[],而 Route是Angular路由框架定义的一个接口。最基本的路由包括2个属性: path和 component,分别是这个路由对应的URL路径，和这个路径对应的组件。</p><p>   上面使用 redirectTo: ‘/todo/list’，重定向到任务列表。当我们使用 redirectTo重定向时，需要 pathMatch来指定匹配方式，也就是如何匹配上面的 ‘’。我们可以完全匹配 full,也可以匹配前缀 prefix。</p><h4 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h4><h5 id="设置载入点"><a href="#设置载入点" class="headerlink" title="设置载入点"></a>设置载入点</h5><p>  载入点，就是来告诉Angular我们的这个路由对应组件的页面，要载入到页面上哪一个地方，这个就是 RouterOutlet。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-outlet&gt;&lt;/router-outlet&gt;</span><br></pre></td></tr></table></figure><h5 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h5><h5 id="使用链接导航"><a href="#使用链接导航" class="headerlink" title="使用链接导航"></a>使用链接导航</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a routerLink=&quot;/todo/list&quot; routerLinkActive=&quot;active&quot;&gt;这是一个链接&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>  outerLink=”/todo/list” 就是链接的定义方式，后面的 routerLinkActive=”active” 表示如果当前的路由处于被激活的状态时，在这个链接的a元素上，就添加一个 active的css类。</p><h5 id="代码中导航"><a href="#代码中导航" class="headerlink" title="代码中导航"></a>代码中导航</h5><p>  有时候，我们需要在代码中根据具体情况跳转到不同的页面，我们可以通过Angular2提供的路由器 Router来实现。</p><p>  如果我们要在某一个组件中实现跳转，我们需要在这个组件的构造方法中注入 Router，然后在需要的时候调用它的 <a href="http://blog.csdn.net/erciyuan_nuonuo/article/details/54604311" target="_blank" rel="external">navigate</a>(newUrl)方法。todoitem.component.ts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Router &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">export class TodoItemComponent &#123;</span><br><span class="line">    constructor(private router: Router) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    gotoDetail(todo: any) &#123;</span><br><span class="line">        this.router.navigate([&apos;/todo/detail&apos;, todo.id]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h5><p>  如果只是在使用路由的时候传递参数的话，有2种方式：</p><ul><li>路径方式：参数作为路径的一部分，例如 /todo/detail/12，其中的’12’就是参数，代表任务Id。 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/todo/detail&apos;, 12]&quot; routerLinkActive=&quot;active&quot;&gt;</span><br></pre></td></tr></table></figure><p>  在这里，我们使用 [routerLink]的方式进行数据的绑定，绑定的值，就是 [‘/todo/detail’, item.id]，他是一个表达式，Angular会把这个列表中的2个数据解析后拼接在一起，生成’/todo/detail/12’的链接。如果我们的连接格式是’/todo/12/detail’，那就是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/todo&apos;, item.id, &apos;detail&apos;]&quot; routerLinkActive=&quot;active&quot;&gt;</span><br></pre></td></tr></table></figure><p>  代码中参数导航：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onSelect(item: Item) &#123;</span><br><span class="line">  this.router.navigate( [&apos;/todo/detail&apos;, item.id] );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>参数方式：这种方式是把参数放在URL的参数里，例如 /todo/detail/12?id=12&amp;type=important。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a [routerLink]=&quot;[&apos;/todo/detail&apos;]&quot; [queryParams]=&quot;&#123;id: item.id, type: &apos;important&apos;&#125;&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>  代码中参数导航：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onSelect(item: Item) &#123;</span><br><span class="line">  this.router.navigate( [&apos;/todo/detail&apos;, this.selectedTodo.id], &#123; queryParams: &#123; id: this.selectedTodo.id, type:&apos;important&apos;&#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h4><p>  在需要加载的组件下写children，写法与路由的写法一致</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import &#123; NgModule &#125; from &apos;@angular/core&apos;;</span><br><span class="line">import &#123; RouterModule, Routes &#125; from &apos;@angular/router&apos;;</span><br><span class="line"></span><br><span class="line">const appChildRoutes: Routes = [</span><br><span class="line">    &#123;path: &apos;&apos;, redirectTo: &quot;one&quot; &#125;,</span><br><span class="line">    &#123;path: &quot;one&quot;, component: TodoListComponent&#125;,</span><br><span class="line">    &#123;path: &quot;two&quot;, component: TodoList2Component&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const routes: Routes = [&#123;</span><br><span class="line">    path: &apos;&apos;,</span><br><span class="line">    redirectTo: &apos;/todo/list&apos;,</span><br><span class="line">    pathMatch: &apos;full&apos;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;todo/list&apos;,</span><br><span class="line">    component: TodoListComponent</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    path: &apos;todo/detail/:id&apos;,</span><br><span class="line">    component: TodoDetailComponent,</span><br><span class="line">    children: appChildRoutes</span><br><span class="line">&#125;];</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">    imports: [RouterModule.forRoot(routes)],</span><br><span class="line">    exports: [RouterModule]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;路由概述&quot;&gt;&lt;a href=&quot;#路由概述&quot; class=&quot;headerlink&quot; title=&quot;路由概述&quot;&gt;&lt;/a&gt;路由概述&lt;/h4&gt;&lt;p&gt;  大多数带路由的应用都要在 index.html 的 &lt;head&gt; 标签下先添加一个 &lt;base&gt; 元素，来告诉路由器该如何合成导航用的 URL 。&lt;/head&gt;&lt;/p&gt;
&lt;p&gt;  Angular2包含了一个路由框架，我们只需要定义一个个的路径、和它对应的组件，然后在页面跳转时也使用Angular2的方式，我们就能够很方便的实现路由控制。&lt;/p&gt;
    
    </summary>
    
    
      <category term="angular" scheme="https://peggy3399.github.io/tags/angular/"/>
    
      <category term="路由" scheme="https://peggy3399.github.io/tags/%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>sass语法</title>
    <link href="https://peggy3399.github.io/2017/11/13/sass%E8%AF%AD%E6%B3%95/"/>
    <id>https://peggy3399.github.io/2017/11/13/sass语法/</id>
    <published>2017-11-13T08:27:56.000Z</published>
    <updated>2017-11-13T09:55:14.926Z</updated>
    
    <content type="html"><![CDATA[<h4 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h4><p> <a href="http://www.w3cplus.com/sassguide/syntax.html" target="_blank" rel="external">sass</a>的导入(@import)规则和CSS的有所不同，编译时会将@import的scss文件合并进来只生成一个CSS文件。但是如果你在sass文件中导入css文件如@import ‘reset.css’，那效果跟普通CSS导入样式文件一样， 文件中，而是以@import方式存在。<br> 所有的sass导入文件都可以忽略后缀名.scss。一般来说基础的文件命名方法以_开头，如_mixin.scss。这种文件在导入的时候可以不写下划线，可写成@import “mixin”。</p><a id="more"></a><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><ul><li>// ….. 单行注释不会输入到CSS中</li><li>/<em> ….. </em>/ 标准注释会编译到css中</li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>sass的变量必须是$开头，后面紧跟变量名，而变量值和变量名之间就需要使用冒号(:)分隔开（就像CSS属性设置一样），如果值后面加上!default则表示默认值。</p><ol><li>普通变量： 声明后全局范围内可以使用</li><li>默认变量： 默认变量之后加上!default<blockquote><p>默认变量需要被背覆盖时只需要在默认变量之前重新声明变量。例如：</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$baseLineHeight:        2;</span><br><span class="line">$baseLineHeight:        1.5 !default;</span><br><span class="line">body&#123;</span><br><span class="line">    line-height: $baseLineHeight; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">body&#123;</span><br><span class="line">    line-height:2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>特殊变量： 当变量作为属性或者在某些特殊的情况下必须要以#{$variables}形式使用。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$borderDirection:       top !default; </span><br><span class="line">$baseFontSize:          12px !default;</span><br><span class="line">$baseLineHeight:        1.5 !default;</span><br><span class="line"></span><br><span class="line">//应用于class和属性</span><br><span class="line">.border-#&#123;$borderDirection&#125;&#123;</span><br><span class="line">  border-#&#123;$borderDirection&#125;:1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">//应用于复杂的属性值</span><br><span class="line">body&#123;</span><br><span class="line">    font:#&#123;$baseFontSize&#125;/#&#123;$baseLineHeight&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">.border-top&#123;</span><br><span class="line">  border-top:1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">  font: 12px/1.5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多值变量： 多值变量分为list类型和map类型，简单来说list类型有点像js中的数组，而map类型有点像js中的对象</p></li></ol><ul><li>list： list数据可通过空格，逗号或小括号分隔多个值，可用nth($var,$index)取值。关于list数据操作还有很多其他函数如length($list)，join($list1,$list2,[$separator])，append($list,$value,[$separator])等。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//定义</span><br><span class="line">//一维数据</span><br><span class="line">$px: 5px 10px 20px 30px;</span><br><span class="line"></span><br><span class="line">//二维数据，相当于js中的二维数组</span><br><span class="line">$px: 5px 10px, 20px 30px;</span><br><span class="line">$px: (5px 10px) (20px 30px);</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$linkColor:         #08c #333 !default;//第一个值为默认值，第二个鼠标滑过值</span><br><span class="line">a&#123;</span><br><span class="line">  color:nth($linkColor,1);</span><br><span class="line"></span><br><span class="line">  &amp;:hover&#123;</span><br><span class="line">    color:nth($linkColor,2);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">a&#123;</span><br><span class="line">  color:#08c;</span><br><span class="line">&#125;</span><br><span class="line">a:hover&#123;</span><br><span class="line">  color:#333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>map： map数据以key和value成对出现，其中value又可以是list。格式为：$map: (key1: value1, key2: value2, key3: value3);。可通过map-get($map,$key)取值。关于map数据还有很多其他函数如map-merge($map1,$map2)，map-keys($map)，map-values($map)等。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//定义</span><br><span class="line">$heading: (h1: 2em, h2: 1.5em, h3: 1.2em);</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">$headings: (h1: 2em, h2: 1.5em, h3: 1.2em);</span><br><span class="line">@each $header, $size in $headings &#123;</span><br><span class="line">  #&#123;$header&#125; &#123;</span><br><span class="line">    font-size: $size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">h1 &#123;</span><br><span class="line">  font-size: 2em; </span><br><span class="line">&#125;</span><br><span class="line">h2 &#123;</span><br><span class="line">  font-size: 1.5em; </span><br><span class="line">&#125;</span><br><span class="line">h3 &#123;</span><br><span class="line">  font-size: 1.2em; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>全局变量： 在变量值后面加上!global即为全局变量。这个目前还用不上，不过将会在sass 3.4后的版本中正式应用。目前的sass变量范围饱受诟病，所以才有了这个全局变量。</li></ol><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><ul><li>选择器嵌套（居多）： 指的是在一个选择器中嵌套另一个选择器来实现继承，从而增强了sass文件的结构性和可读性。<br>在选择器嵌套中，可以使用&amp;表示父元素选择器</li><li>属性嵌套：指的是有些属性拥有同一个开始单词，如border-width，border-color都是以border开头。例如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//sass style</span><br><span class="line">//-------------------------------</span><br><span class="line">.fakeshadow &#123;</span><br><span class="line">  border: &#123;</span><br><span class="line">    style: solid;</span><br><span class="line">    left: &#123;</span><br><span class="line">      width: 4px;</span><br><span class="line">      color: #888;</span><br><span class="line">    &#125;</span><br><span class="line">    right: &#123;</span><br><span class="line">      width: 2px;</span><br><span class="line">      color: #ccc;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//css style</span><br><span class="line">//-------------------------------</span><br><span class="line">.fakeshadow &#123;</span><br><span class="line">  border-style: solid;</span><br><span class="line">  border-left-width: 4px;</span><br><span class="line">  border-left-color: #888;</span><br><span class="line">  border-right-width: 2px;</span><br><span class="line">  border-right-color: #ccc; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@at-root：用来跳出选择器嵌套的。默认所有的嵌套，继承所有上级选择器，但有了这个就可以跳出所有上级选择器。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//单个选择器跳出</span><br><span class="line">.parent-2 &#123;</span><br><span class="line">  color:#f00;</span><br><span class="line">  @at-root .child &#123;</span><br><span class="line">    width:200px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//多个选择器跳出</span><br><span class="line">.parent-3 &#123;</span><br><span class="line">  background:#f00;</span><br><span class="line">  @at-root &#123;</span><br><span class="line">    .child1 &#123;</span><br><span class="line">      width:300px;</span><br><span class="line">    &#125;</span><br><span class="line">    .child2 &#123;</span><br><span class="line">      width:400px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@at-root与&amp;配合使用</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;导入文件&quot;&gt;&lt;a href=&quot;#导入文件&quot; class=&quot;headerlink&quot; title=&quot;导入文件&quot;&gt;&lt;/a&gt;导入文件&lt;/h4&gt;&lt;p&gt; &lt;a href=&quot;http://www.w3cplus.com/sassguide/syntax.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sass&lt;/a&gt;的导入(@import)规则和CSS的有所不同，编译时会将@import的scss文件合并进来只生成一个CSS文件。但是如果你在sass文件中导入css文件如@import ‘reset.css’，那效果跟普通CSS导入样式文件一样， 文件中，而是以@import方式存在。&lt;br&gt; 所有的sass导入文件都可以忽略后缀名.scss。一般来说基础的文件命名方法以_开头，如_mixin.scss。这种文件在导入的时候可以不写下划线，可写成@import “mixin”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="sass" scheme="https://peggy3399.github.io/tags/sass/"/>
    
      <category term="css" scheme="https://peggy3399.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>关闭占用端口</title>
    <link href="https://peggy3399.github.io/2017/11/13/%E5%85%B3%E9%97%AD%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3/"/>
    <id>https://peggy3399.github.io/2017/11/13/关闭占用端口/</id>
    <published>2017-11-13T08:27:07.000Z</published>
    <updated>2017-11-13T09:55:20.581Z</updated>
    
    <content type="html"><![CDATA[<p>命令：netstat -ano—–列出所有端口的情况<br>命令：netstat -aon|findstr “49157”——-查看被占用端口对应的PID<br>命令：tasklist|findstr “2720”——查看是哪个进程或者程序占用了2720<br>命令：taskkill /f /t /im Tencentdl.exe——结束该进程<br>      taskkill/pid PID号 /F</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;命令：netstat -ano—–列出所有端口的情况&lt;br&gt;命令：netstat -aon|findstr “49157”——-查看被占用端口对应的PID&lt;br&gt;命令：tasklist|findstr “2720”——查看是哪个进程或者程序占用了2720&lt;br&gt;命令：tas
      
    
    </summary>
    
    
      <category term="命令行" scheme="https://peggy3399.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>git操作</title>
    <link href="https://peggy3399.github.io/2017/11/13/git%E6%93%8D%E4%BD%9C/"/>
    <id>https://peggy3399.github.io/2017/11/13/git操作/</id>
    <published>2017-11-13T07:03:14.000Z</published>
    <updated>2017-11-13T09:54:29.217Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一次提交本地代码到远程分支"><a href="#第一次提交本地代码到远程分支" class="headerlink" title="第一次提交本地代码到远程分支"></a>第一次提交本地代码到远程分支</h4><ul><li>git init</li><li>git remote add origin https://… .git</li><li>git pull origin master –allow-unrelated-histories</li><li>git add .</li><li>git commit -m ‘解释说明文字’</li><li>git push oriign master</li></ul><a id="more"></a><blockquote><p>出现的问题fatal: refusing to merge unrelated histories<br>解决问题：git pull origin master –allow-unrelated-histories</p></blockquote><h4 id="创建本地分支提交到远程"><a href="#创建本地分支提交到远程" class="headerlink" title="创建本地分支提交到远程"></a>创建本地分支提交到远程</h4><ul><li>git branch dev</li><li>git checkout dev</li><li>git add .</li><li>git commit -m ‘解释说明文字’</li><li>git push oriign dev</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;第一次提交本地代码到远程分支&quot;&gt;&lt;a href=&quot;#第一次提交本地代码到远程分支&quot; class=&quot;headerlink&quot; title=&quot;第一次提交本地代码到远程分支&quot;&gt;&lt;/a&gt;第一次提交本地代码到远程分支&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;git init&lt;/li&gt;
&lt;li&gt;git remote add origin https://… .git&lt;/li&gt;
&lt;li&gt;git pull origin master –allow-unrelated-histories&lt;/li&gt;
&lt;li&gt;git add .&lt;/li&gt;
&lt;li&gt;git commit -m ‘解释说明文字’&lt;/li&gt;
&lt;li&gt;git push oriign master&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://peggy3399.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello Everybody</title>
    <link href="https://peggy3399.github.io/2017/11/13/hello-world/"/>
    <id>https://peggy3399.github.io/2017/11/13/hello-world/</id>
    <published>2017-11-13T06:52:33.315Z</published>
    <updated>2017-11-13T10:29:53.758Z</updated>
    
    <content type="html"><![CDATA[<p>今天，我创建了自己的微博，很开心跟大家分享！</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><a id="more"></a><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，我创建了自己的微博，很开心跟大家分享！&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hello" scheme="https://peggy3399.github.io/tags/hello/"/>
    
  </entry>
  
</feed>
